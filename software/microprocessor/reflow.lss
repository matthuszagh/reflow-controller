
reflow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00001bfc  00001cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bfc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800176  00800176  00001d26  2**0
                  ALLOC
  3 .eeprom       00000014  00810000  00810000  00001d26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00001d3a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d98  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000318  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005e60  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001af3  00000000  00000000  00007f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000358c  00000000  00000000  00009a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000994  00000000  00000000  0000cfcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002580  00000000  00000000  0000d960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003d70  00000000  00000000  0000fee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000430  00000000  00000000  00013c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
       6:	00 00       	nop
       8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
       a:	00 00       	nop
       c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
       e:	00 00       	nop
      10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
      12:	00 00       	nop
      14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
      16:	00 00       	nop
      18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
      22:	00 00       	nop
      24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
      26:	00 00       	nop
      28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c6       	rjmp	.+3302   	; 0xd14 <__vector_11>
      2e:	00 00       	nop
      30:	17 c7       	rjmp	.+3630   	; 0xe60 <__vector_12>
      32:	00 00       	nop
      34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
      36:	00 00       	nop
      38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c4       	rjmp	.+2246   	; 0x908 <__vector_16>
      42:	00 00       	nop
      44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
      46:	00 00       	nop
      48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
      4e:	00 00       	nop
      50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
      52:	00 00       	nop
      54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
      56:	00 00       	nop
      58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
      5e:	00 00       	nop
      60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
      62:	00 00       	nop
      64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
      66:	00 00       	nop
      68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
      6e:	00 00       	nop
      70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
      72:	00 00       	nop
      74:	9a 07       	cpc	r25, r26
      76:	bc 07       	cpc	r27, r28
      78:	a8 08       	sbc	r10, r8
      7a:	bc 07       	cpc	r27, r28
      7c:	a8 08       	sbc	r10, r8
      7e:	01 08       	sbc	r0, r1
      80:	23 08       	sbc	r2, r3
      82:	a8 08       	sbc	r10, r8
      84:	75 08       	sbc	r7, r5
      86:	87 08       	sbc	r8, r7

00000088 <ProductString>:
      88:	2e 03 52 00 65 00 66 00 6c 00 6f 00 77 00 20 00     ..R.e.f.l.o.w. .
      98:	6f 00 76 00 65 00 6e 00 20 00 63 00 6f 00 6e 00     o.v.e.n. .c.o.n.
      a8:	74 00 72 00 6f 00 6c 00 6c 00 65 00 72 00 00 00     t.r.o.l.l.e.r...

000000b8 <ManufacturerString>:
      b8:	1e 03 48 00 65 00 6e 00 72 00 69 00 6b 00 20 00     ..H.e.n.r.i.k. .
      c8:	46 00 6f 00 72 00 73 00 74 00 65 00 6e 00 00 00     F.o.r.s.t.e.n...

000000d8 <LanguageString>:
      d8:	04 03 09 04                                         ....

000000dc <ConfigurationDescriptor>:
      dc:	09 02 3e 00 01 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ec:	01 00 05 24 00 00 02 04 24 02 06 05 24 06 00 01     ...$....$...$...
      fc:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     10c:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

0000011a <DeviceDescriptor>:
     11a:	12 01 00 02 02 00 00 08 eb 03 ee 2f 02 00 01 02     .........../....
     12a:	dc 01                                               ..

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	d2 e0       	ldi	r29, 0x02	; 2
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	ec ef       	ldi	r30, 0xFC	; 252
     140:	fb e1       	ldi	r31, 0x1B	; 27
     142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
     144:	05 90       	lpm	r0, Z+
     146:	0d 92       	st	X+, r0
     148:	a6 37       	cpi	r26, 0x76	; 118
     14a:	b1 07       	cpc	r27, r17
     14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
     14e:	21 e0       	ldi	r18, 0x01	; 1
     150:	a6 e7       	ldi	r26, 0x76	; 118
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
     156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
     158:	a1 3b       	cpi	r26, 0xB1	; 177
     15a:	b2 07       	cpc	r27, r18
     15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
     15e:	3c d3       	rcall	.+1656   	; 0x7d8 <main>
     160:	4b cd       	rjmp	.-1386   	; 0xfffffbf8 <__eeprom_end+0xff7efbe4>

00000162 <__bad_interrupt>:
     162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <set_profile>:
			},
	};

void set_profile(void) {
    /* Read profile from EEPROM to RAM */
    eeprom_read_block(&profile, &eeprom_profile, sizeof(profile));
     164:	44 e1       	ldi	r20, 0x14	; 20
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	70 e0       	ldi	r23, 0x00	; 0
     16c:	8a e8       	ldi	r24, 0x8A	; 138
     16e:	91 e0       	ldi	r25, 0x01	; 1
     170:	d2 cc       	rjmp	.-1628   	; 0xfffffb16 <__eeprom_end+0xff7efb02>

00000172 <write_profile>:
}

void write_profile(void) {
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	64 97       	sbiw	r28, 0x14	; 20
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
     18e:	8e 01       	movw	r16, r28
     190:	0f 5f       	subi	r16, 0xFF	; 255
     192:	1f 4f       	sbci	r17, 0xFF	; 255
     194:	7e 01       	movw	r14, r28
     196:	25 e1       	ldi	r18, 0x15	; 21
     198:	e2 0e       	add	r14, r18
     19a:	f1 1c       	adc	r15, r1
    /* Read profile from PC and replace current profile in RAM and EEPROM */
    uint8_t settings[20];
    uint8_t i=0;
    int ReceivedChar;
    for(;;) {
        if ((ReceivedChar = fgetc(&USBSerialStream)) != EOF) {
     19c:	86 e7       	ldi	r24, 0x76	; 118
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	0e 94 b9 0a 	call	0x1572	; 0x1572 <fgetc>
     1a4:	8f 3f       	cpi	r24, 0xFF	; 255
     1a6:	ef ef       	ldi	r30, 0xFF	; 255
     1a8:	9e 07       	cpc	r25, r30
     1aa:	c1 f3       	breq	.-16     	; 0x19c <write_profile+0x2a>
            settings[i++] = (uint8_t)ReceivedChar;
     1ac:	f8 01       	movw	r30, r16
     1ae:	81 93       	st	Z+, r24
     1b0:	8f 01       	movw	r16, r30
            if (i==sizeof(profile))
     1b2:	ee 15       	cp	r30, r14
     1b4:	ff 05       	cpc	r31, r15
     1b6:	91 f7       	brne	.-28     	; 0x19c <write_profile+0x2a>
    }

#define TOU16(x,k) ( (((uint16_t)x[k])<<8)|((uint16_t)x[k+1]) )

    /* Change the current settings in RAM */
    profile.start_rate = TOU16(settings,0);
     1b8:	89 81       	ldd	r24, Y+1	; 0x01
     1ba:	9a 81       	ldd	r25, Y+2	; 0x02
     1bc:	98 27       	eor	r25, r24
     1be:	89 27       	eor	r24, r25
     1c0:	98 27       	eor	r25, r24
     1c2:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <profile+0x1>
     1c6:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <profile>
    profile.soak_temp1 = TOU16(settings,2);
     1ca:	8b 81       	ldd	r24, Y+3	; 0x03
     1cc:	9c 81       	ldd	r25, Y+4	; 0x04
     1ce:	98 27       	eor	r25, r24
     1d0:	89 27       	eor	r24, r25
     1d2:	98 27       	eor	r25, r24
     1d4:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <profile+0x3>
     1d8:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <profile+0x2>
    profile.soak_temp2 = TOU16(settings,4);
     1dc:	8d 81       	ldd	r24, Y+5	; 0x05
     1de:	9e 81       	ldd	r25, Y+6	; 0x06
     1e0:	98 27       	eor	r25, r24
     1e2:	89 27       	eor	r24, r25
     1e4:	98 27       	eor	r25, r24
     1e6:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <profile+0x5>
     1ea:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <profile+0x4>
    profile.soak_length = TOU16(settings,6);
     1ee:	8f 81       	ldd	r24, Y+7	; 0x07
     1f0:	98 85       	ldd	r25, Y+8	; 0x08
     1f2:	98 27       	eor	r25, r24
     1f4:	89 27       	eor	r24, r25
     1f6:	98 27       	eor	r25, r24
     1f8:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <profile+0x7>
     1fc:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <profile+0x6>
    profile.peak_temp = TOU16(settings,8);
     200:	89 85       	ldd	r24, Y+9	; 0x09
     202:	9a 85       	ldd	r25, Y+10	; 0x0a
     204:	98 27       	eor	r25, r24
     206:	89 27       	eor	r24, r25
     208:	98 27       	eor	r25, r24
     20a:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <profile+0x9>
     20e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <profile+0x8>
    profile.time_to_peak = TOU16(settings,10);
     212:	8b 85       	ldd	r24, Y+11	; 0x0b
     214:	9c 85       	ldd	r25, Y+12	; 0x0c
     216:	98 27       	eor	r25, r24
     218:	89 27       	eor	r24, r25
     21a:	98 27       	eor	r25, r24
     21c:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <profile+0xb>
     220:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <profile+0xa>
    profile.cool_rate = TOU16(settings,12);
     224:	8d 85       	ldd	r24, Y+13	; 0x0d
     226:	9e 85       	ldd	r25, Y+14	; 0x0e
     228:	98 27       	eor	r25, r24
     22a:	89 27       	eor	r24, r25
     22c:	98 27       	eor	r25, r24
     22e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <profile+0xd>
     232:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <profile+0xc>
    profile.pid_p = TOU16(settings,14);
     236:	8f 85       	ldd	r24, Y+15	; 0x0f
     238:	98 89       	ldd	r25, Y+16	; 0x10
     23a:	98 27       	eor	r25, r24
     23c:	89 27       	eor	r24, r25
     23e:	98 27       	eor	r25, r24
     240:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <profile+0xf>
     244:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <profile+0xe>
    profile.pid_i = TOU16(settings,16);
     248:	89 89       	ldd	r24, Y+17	; 0x11
     24a:	9a 89       	ldd	r25, Y+18	; 0x12
     24c:	98 27       	eor	r25, r24
     24e:	89 27       	eor	r24, r25
     250:	98 27       	eor	r25, r24
     252:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <profile+0x11>
     256:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <profile+0x10>
    profile.pid_d = TOU16(settings,18);
     25a:	8b 89       	ldd	r24, Y+19	; 0x13
     25c:	9c 89       	ldd	r25, Y+20	; 0x14
     25e:	98 27       	eor	r25, r24
     260:	89 27       	eor	r24, r25
     262:	98 27       	eor	r25, r24
     264:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <profile+0x13>
     268:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <profile+0x12>
    /* Write all settings as one block */
    eeprom_update_block(&profile, &eeprom_profile ,sizeof(profile));
     26c:	44 e1       	ldi	r20, 0x14	; 20
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	8a e8       	ldi	r24, 0x8A	; 138
     276:	91 e0       	ldi	r25, 0x01	; 1
}
     278:	64 96       	adiw	r28, 0x14	; 20
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	ff 90       	pop	r15
     28e:	ef 90       	pop	r14
    profile.cool_rate = TOU16(settings,12);
    profile.pid_p = TOU16(settings,14);
    profile.pid_i = TOU16(settings,16);
    profile.pid_d = TOU16(settings,18);
    /* Write all settings as one block */
    eeprom_update_block(&profile, &eeprom_profile ,sizeof(profile));
     290:	52 cc       	rjmp	.-1884   	; 0xfffffb36 <__eeprom_end+0xff7efb22>

00000292 <output_profile>:
}

void output_profile(void) {
    /* Print current profile through USB */
    fprintf(&USBSerialStream, "!%u,%u,%u,%u,%u,%u,%u,%u,%u,%u\n",
     292:	ea e8       	ldi	r30, 0x8A	; 138
     294:	f1 e0       	ldi	r31, 0x01	; 1
     296:	83 89       	ldd	r24, Z+19	; 0x13
     298:	8f 93       	push	r24
     29a:	82 89       	ldd	r24, Z+18	; 0x12
     29c:	8f 93       	push	r24
     29e:	81 89       	ldd	r24, Z+17	; 0x11
     2a0:	8f 93       	push	r24
     2a2:	80 89       	ldd	r24, Z+16	; 0x10
     2a4:	8f 93       	push	r24
     2a6:	87 85       	ldd	r24, Z+15	; 0x0f
     2a8:	8f 93       	push	r24
     2aa:	86 85       	ldd	r24, Z+14	; 0x0e
     2ac:	8f 93       	push	r24
     2ae:	85 85       	ldd	r24, Z+13	; 0x0d
     2b0:	8f 93       	push	r24
     2b2:	84 85       	ldd	r24, Z+12	; 0x0c
     2b4:	8f 93       	push	r24
     2b6:	83 85       	ldd	r24, Z+11	; 0x0b
     2b8:	8f 93       	push	r24
     2ba:	82 85       	ldd	r24, Z+10	; 0x0a
     2bc:	8f 93       	push	r24
     2be:	81 85       	ldd	r24, Z+9	; 0x09
     2c0:	8f 93       	push	r24
     2c2:	80 85       	ldd	r24, Z+8	; 0x08
     2c4:	8f 93       	push	r24
     2c6:	87 81       	ldd	r24, Z+7	; 0x07
     2c8:	8f 93       	push	r24
     2ca:	86 81       	ldd	r24, Z+6	; 0x06
     2cc:	8f 93       	push	r24
     2ce:	85 81       	ldd	r24, Z+5	; 0x05
     2d0:	8f 93       	push	r24
     2d2:	84 81       	ldd	r24, Z+4	; 0x04
     2d4:	8f 93       	push	r24
     2d6:	83 81       	ldd	r24, Z+3	; 0x03
     2d8:	8f 93       	push	r24
     2da:	82 81       	ldd	r24, Z+2	; 0x02
     2dc:	8f 93       	push	r24
     2de:	81 81       	ldd	r24, Z+1	; 0x01
     2e0:	8f 93       	push	r24
     2e2:	80 81       	ld	r24, Z
     2e4:	8f 93       	push	r24
     2e6:	8b e1       	ldi	r24, 0x1B	; 27
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	9f 93       	push	r25
     2ec:	8f 93       	push	r24
     2ee:	86 e7       	ldi	r24, 0x76	; 118
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	9f 93       	push	r25
     2f4:	8f 93       	push	r24
     2f6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <fprintf>
            profile.time_to_peak,
            profile.cool_rate,
            profile.pid_p,
            profile.pid_i,
            profile.pid_d);
}
     2fa:	8d b7       	in	r24, 0x3d	; 61
     2fc:	9e b7       	in	r25, 0x3e	; 62
     2fe:	48 96       	adiw	r24, 0x18	; 24
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	9e bf       	out	0x3e, r25	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	8d bf       	out	0x3d, r24	; 61
     30a:	08 95       	ret

0000030c <target_temp>:

/* Get the target temperature */
uint16_t target_temp(uint16_t temp, uint16_t *timer) {
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	ec 01       	movw	r28, r24
     312:	fb 01       	movw	r30, r22
    uint16_t target = 0;
    switch(reflow_state) {
     314:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <reflow_state>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	d9 f1       	breq	.+118    	; 0x392 <target_temp+0x86>
     31c:	30 f4       	brcc	.+12     	; 0x32a <target_temp+0x1e>
     31e:	88 23       	and	r24, r24
     320:	09 f4       	brne	.+2      	; 0x324 <target_temp+0x18>
     322:	93 c0       	rjmp	.+294    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	41 f0       	breq	.+16     	; 0x338 <target_temp+0x2c>
     328:	8e c0       	rjmp	.+284    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     32a:	83 30       	cpi	r24, 0x03	; 3
     32c:	09 f4       	brne	.+2      	; 0x330 <target_temp+0x24>
     32e:	4e c0       	rjmp	.+156    	; 0x3cc <target_temp+0xc0>
     330:	84 30       	cpi	r24, 0x04	; 4
     332:	09 f4       	brne	.+2      	; 0x336 <target_temp+0x2a>
     334:	74 c0       	rjmp	.+232    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     336:	87 c0       	rjmp	.+270    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
        case(T_STOP):
            target = 0;
            break;
        case(T_START):
            target = prev_target + profile.start_rate;
     338:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <profile>
     33c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <profile+0x1>
     340:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <prev_target>
     344:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <prev_target+0x1>
     348:	a8 0f       	add	r26, r24
     34a:	b9 1f       	adc	r27, r25
            /* Clamp the target value and avoid it getting too big, if the oven
             * isn't yet on. */
            target = CLAMP(target,room_temp,MIN(profile.soak_temp1,temp+profile.start_rate*5));
     34c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <profile+0x2>
     350:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <profile+0x3>
     354:	65 e0       	ldi	r22, 0x05	; 5
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulhi3>
     35c:	8c 0f       	add	r24, r28
     35e:	9d 1f       	adc	r25, r29
     360:	28 17       	cp	r18, r24
     362:	39 07       	cpc	r19, r25
     364:	08 f4       	brcc	.+2      	; 0x368 <target_temp+0x5c>
     366:	c9 01       	movw	r24, r18
     368:	8a 17       	cp	r24, r26
     36a:	9b 07       	cpc	r25, r27
     36c:	40 f0       	brcs	.+16     	; 0x37e <target_temp+0x72>
     36e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <room_temp>
     372:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <room_temp+0x1>
     376:	8a 17       	cp	r24, r26
     378:	9b 07       	cpc	r25, r27
     37a:	08 f4       	brcc	.+2      	; 0x37e <target_temp+0x72>
     37c:	cd 01       	movw	r24, r26
            if (temp > profile.soak_temp1 - 4*5) {
     37e:	24 51       	subi	r18, 0x14	; 20
     380:	31 09       	sbc	r19, r1
     382:	2c 17       	cp	r18, r28
     384:	3d 07       	cpc	r19, r29
     386:	08 f0       	brcs	.+2      	; 0x38a <target_temp+0x7e>
     388:	62 c0       	rjmp	.+196    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
                *timer = 0;
     38a:	11 82       	std	Z+1, r1	; 0x01
     38c:	10 82       	st	Z, r1
                reflow_state = T_SOAK;
     38e:	22 e0       	ldi	r18, 0x02	; 2
     390:	43 c0       	rjmp	.+134    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
            }
            break;
        case(T_SOAK):
            /* Linear interpolation from soak_temp1 to soak_temp2 in soak_length
             * seconds */
            if ( (*timer) < profile.soak_length) {
     392:	60 81       	ld	r22, Z
     394:	71 81       	ldd	r23, Z+1	; 0x01
     396:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <profile+0x6>
     39a:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <profile+0x7>
     39e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <profile+0x4>
     3a2:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <profile+0x5>
     3a6:	6a 17       	cp	r22, r26
     3a8:	7b 07       	cpc	r23, r27
     3aa:	28 f4       	brcc	.+10     	; 0x3b6 <target_temp+0xaa>
                target = profile.soak_temp1 +
                   ((*timer)*(profile.soak_temp2-profile.soak_temp1))/profile.soak_length;
     3ac:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <profile+0x2>
     3b0:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <profile+0x3>
     3b4:	1c c0       	rjmp	.+56     	; 0x3ee <target_temp+0xe2>
            } else {
                target = profile.soak_temp2;
                if (temp > profile.soak_temp2 - 4*10) {
     3b6:	9c 01       	movw	r18, r24
     3b8:	28 52       	subi	r18, 0x28	; 40
     3ba:	31 09       	sbc	r19, r1
     3bc:	2c 17       	cp	r18, r28
     3be:	3d 07       	cpc	r19, r29
     3c0:	08 f0       	brcs	.+2      	; 0x3c4 <target_temp+0xb8>
     3c2:	45 c0       	rjmp	.+138    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
                    *timer = 0;
     3c4:	11 82       	std	Z+1, r1	; 0x01
     3c6:	10 82       	st	Z, r1
                    reflow_state = T_PEAK;
     3c8:	23 e0       	ldi	r18, 0x03	; 3
     3ca:	26 c0       	rjmp	.+76     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
                }
            }
            break;
        case(T_PEAK):
            if ( (*timer) < profile.time_to_peak) {
     3cc:	60 81       	ld	r22, Z
     3ce:	71 81       	ldd	r23, Z+1	; 0x01
     3d0:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <profile+0xa>
     3d4:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <profile+0xb>
     3d8:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <profile+0x8>
     3dc:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <profile+0x9>
     3e0:	6a 17       	cp	r22, r26
     3e2:	7b 07       	cpc	r23, r27
     3e4:	78 f4       	brcc	.+30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
                target = profile.soak_temp2 +
                   ((*timer)*(profile.peak_temp-profile.soak_temp2))/profile.time_to_peak;
     3e6:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <profile+0x4>
     3ea:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <profile+0x5>
                }
            }
            break;
        case(T_PEAK):
            if ( (*timer) < profile.time_to_peak) {
                target = profile.soak_temp2 +
     3ee:	82 1b       	sub	r24, r18
     3f0:	93 0b       	sbc	r25, r19
     3f2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__mulhi3>
     3f6:	bd 01       	movw	r22, r26
     3f8:	0e 94 9f 0a 	call	0x153e	; 0x153e <__udivmodhi4>
     3fc:	cb 01       	movw	r24, r22
     3fe:	82 0f       	add	r24, r18
     400:	93 1f       	adc	r25, r19
     402:	25 c0       	rjmp	.+74     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
                   ((*timer)*(profile.peak_temp-profile.soak_temp2))/profile.time_to_peak;
            } else {
                target = profile.peak_temp;
                if (temp > target) {
     404:	8c 17       	cp	r24, r28
     406:	9d 07       	cpc	r25, r29
     408:	10 f5       	brcc	.+68     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
                    *timer = 0;
     40a:	11 82       	std	Z+1, r1	; 0x01
     40c:	10 82       	st	Z, r1
                    integral = 0; /* Zero integral term of PID for faster response */
     40e:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <integral+0x1>
     412:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <integral>
                    reflow_state = T_COOL;
     416:	24 e0       	ldi	r18, 0x04	; 4
     418:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <reflow_state>
     41c:	18 c0       	rjmp	.+48     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
                }
            }
            break;
        case(T_COOL):
            target = prev_target-profile.cool_rate;
     41e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <prev_target>
     422:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <prev_target+0x1>
     426:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <profile+0xc>
     42a:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <profile+0xd>
     42e:	82 1b       	sub	r24, r18
     430:	93 0b       	sbc	r25, r19
            if (target < room_temp) {
     432:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <room_temp>
     436:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <room_temp+0x1>
     43a:	82 17       	cp	r24, r18
     43c:	93 07       	cpc	r25, r19
     43e:	38 f4       	brcc	.+14     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
                reflow_state = T_STOP;
     440:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <reflow_state>
     444:	04 c0       	rjmp	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
            }
            break;
        default:
            /* Invalid state */
            reflow_state = T_STOP;
     446:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <reflow_state>
/* Get the target temperature */
uint16_t target_temp(uint16_t temp, uint16_t *timer) {
    uint16_t target = 0;
    switch(reflow_state) {
        case(T_STOP):
            target = 0;
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
        default:
            /* Invalid state */
            reflow_state = T_STOP;
            break;
    }
    prev_target = target;
     44e:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <prev_target+0x1>
     452:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <prev_target>
    return target;
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <usb_rx>:
void usb_rx(void) {
    /*  Handle messages from host */
    char ReceivedChar;
    int ReceivedByte;
    /* Start commands with '!' */
    if ( (ReceivedChar = fgetc(&USBSerialStream)) != '!') {
     45c:	86 e7       	ldi	r24, 0x76	; 118
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	0e 94 b9 0a 	call	0x1572	; 0x1572 <fgetc>
     464:	81 32       	cpi	r24, 0x21	; 33
     466:	21 f5       	brne	.+72     	; 0x4b0 <usb_rx+0x54>
        return;
    }
    /* Get the real command */
    while((ReceivedByte = fgetc(&USBSerialStream)) == EOF);
     468:	86 e7       	ldi	r24, 0x76	; 118
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <fgetc>
     470:	8f 3f       	cpi	r24, 0xFF	; 255
     472:	2f ef       	ldi	r18, 0xFF	; 255
     474:	92 07       	cpc	r25, r18
     476:	c1 f3       	breq	.-16     	; 0x468 <usb_rx+0xc>
    ReceivedChar = (char)ReceivedByte;
    /* PID debugging, prints PID term values */
    if (ReceivedChar == 'D') {
     478:	84 34       	cpi	r24, 0x44	; 68
     47a:	21 f4       	brne	.+8      	; 0x484 <usb_rx+0x28>
        PID_debug = 1;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <PID_debug>
     482:	08 95       	ret
    }
    if (ReceivedChar == 'd') {
     484:	84 36       	cpi	r24, 0x64	; 100
     486:	19 f4       	brne	.+6      	; 0x48e <usb_rx+0x32>
        PID_debug = 0;
     488:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <PID_debug>
     48c:	08 95       	ret
    }
    /* Write temperature profile and PID settings */
    if (ReceivedChar == 'W') {
     48e:	87 35       	cpi	r24, 0x57	; 87
     490:	09 f4       	brne	.+2      	; 0x494 <usb_rx+0x38>
        write_profile();
     492:	6f ce       	rjmp	.-802    	; 0x172 <write_profile>
    }
    /* Start reflow */
    if (ReceivedChar == 'S') {
     494:	83 35       	cpi	r24, 0x53	; 83
     496:	21 f4       	brne	.+8      	; 0x4a0 <usb_rx+0x44>
        reflow_state = T_START;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <reflow_state>
     49e:	08 95       	ret
    }
    /* Stop reflow */
    if (ReceivedChar == 'H') {
     4a0:	88 34       	cpi	r24, 0x48	; 72
     4a2:	19 f4       	brne	.+6      	; 0x4aa <usb_rx+0x4e>
        reflow_state = T_STOP;
     4a4:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <reflow_state>
     4a8:	08 95       	ret
    }
    /* Output current profile */
    if (ReceivedChar == 'O') {
     4aa:	8f 34       	cpi	r24, 0x4F	; 79
        output_profile();
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <usb_rx+0x54>
     4ae:	f1 ce       	rjmp	.-542    	; 0x292 <output_profile>
     4b0:	08 95       	ret

000004b2 <read_sensor>:
    }
    return;
}

uint16_t read_sensor(void) {
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <read_sensor+0xa>
     4bc:	00 d0       	rcall	.+0      	; 0x4be <read_sensor+0xc>
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
    /* Enable slave */
    uint8_t sensor[4];
    uint16_t temp;
    int8_t i;
    /* SS = 0 */
    PORTB = (0<<SS);
     4c2:	15 b8       	out	0x05, r1	; 5

    /* Wait for the device */
    _NOP();
     4c4:	00 00       	nop
    _NOP();
     4c6:	00 00       	nop
     4c8:	fe 01       	movw	r30, r28
     4ca:	31 96       	adiw	r30, 0x01	; 1
     4cc:	ce 01       	movw	r24, r28
     4ce:	05 96       	adiw	r24, 0x05	; 5
    /* Transmit nothing */
    for(i=0;i<4;i++) {
        SPDR = 0x00;
     4d0:	1e bc       	out	0x2e, r1	; 46
        /* Wait for transmission to complete */
        while (!(SPSR & _BV(SPIF)));
     4d2:	0d b4       	in	r0, 0x2d	; 45
     4d4:	07 fe       	sbrs	r0, 7
     4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <read_sensor+0x20>
        sensor[i] = SPDR;
     4d8:	2e b5       	in	r18, 0x2e	; 46
     4da:	21 93       	st	Z+, r18

    /* Wait for the device */
    _NOP();
    _NOP();
    /* Transmit nothing */
    for(i=0;i<4;i++) {
     4dc:	e8 17       	cp	r30, r24
     4de:	f9 07       	cpc	r31, r25
     4e0:	b9 f7       	brne	.-18     	; 0x4d0 <read_sensor+0x1e>
        while (!(SPSR & _BV(SPIF)));
        sensor[i] = SPDR;
    }

    /* Thermocouple temperature */
    if (sensor[0]&(1<<7)) {
     4e2:	09 81       	ldd	r16, Y+1	; 0x01
     4e4:	3a 81       	ldd	r19, Y+2	; 0x02
     4e6:	07 fd       	sbrc	r16, 7
     4e8:	0c c0       	rjmp	.+24     	; 0x502 <read_sensor+0x50>
        /* Negative temperature, clamp it to zero */
        temp = 0;
    } else {
        temp = (((uint16_t)sensor[0])<<6)+(sensor[1]>>2);
     4ea:	10 e0       	ldi	r17, 0x00	; 0
     4ec:	66 e0       	ldi	r22, 0x06	; 6
     4ee:	00 0f       	add	r16, r16
     4f0:	11 1f       	adc	r17, r17
     4f2:	6a 95       	dec	r22
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <read_sensor+0x3c>
     4f6:	83 2f       	mov	r24, r19
     4f8:	86 95       	lsr	r24
     4fa:	86 95       	lsr	r24
     4fc:	08 0f       	add	r16, r24
     4fe:	11 1d       	adc	r17, r1
     500:	02 c0       	rjmp	.+4      	; 0x506 <read_sensor+0x54>
    }

    /* Thermocouple temperature */
    if (sensor[0]&(1<<7)) {
        /* Negative temperature, clamp it to zero */
        temp = 0;
     502:	00 e0       	ldi	r16, 0x00	; 0
     504:	10 e0       	ldi	r17, 0x00	; 0
    } else {
        temp = (((uint16_t)sensor[0])<<6)+(sensor[1]>>2);
    }

    /* Room temperature */
    if (sensor[2]&(1<<7)) {
     506:	8b 81       	ldd	r24, Y+3	; 0x03
     508:	87 ff       	sbrs	r24, 7
     50a:	05 c0       	rjmp	.+10     	; 0x516 <read_sensor+0x64>
        /* Negative temperature, clamp it to zero */
        room_temp = 0;
     50c:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <room_temp+0x1>
     510:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <room_temp>
     514:	13 c0       	rjmp	.+38     	; 0x53c <read_sensor+0x8a>
    } else {
        room_temp = (((uint16_t)sensor[2])<<4)+(sensor[3]>>4);
        /* Sensor gives room temp as sixteenths of celsius,
         * divide it by four to get quarters of celsius. */
        room_temp = room_temp / 4;
     516:	2c 81       	ldd	r18, Y+4	; 0x04
     518:	22 95       	swap	r18
     51a:	2f 70       	andi	r18, 0x0F	; 15
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	44 e0       	ldi	r20, 0x04	; 4
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	4a 95       	dec	r20
     526:	e1 f7       	brne	.-8      	; 0x520 <read_sensor+0x6e>
     528:	82 0f       	add	r24, r18
     52a:	91 1d       	adc	r25, r1
     52c:	96 95       	lsr	r25
     52e:	87 95       	ror	r24
     530:	96 95       	lsr	r25
     532:	87 95       	ror	r24
     534:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <room_temp+0x1>
     538:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <room_temp>
    }

    if (sensor[1]&0x01) {
     53c:	30 ff       	sbrs	r19, 0
     53e:	14 c0       	rjmp	.+40     	; 0x568 <read_sensor+0xb6>
        /* Fault */
        fprintf(&USBSerialStream,"Fault:%u\n",sensor[3]&0b00000111);
     540:	8c 81       	ldd	r24, Y+4	; 0x04
     542:	87 70       	andi	r24, 0x07	; 7
     544:	1f 92       	push	r1
     546:	8f 93       	push	r24
     548:	8b e3       	ldi	r24, 0x3B	; 59
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	86 e7       	ldi	r24, 0x76	; 118
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <fprintf>
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
    }

    /* Disable slave */
    PORTB = (1<<SS);
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	85 b9       	out	0x05, r24	; 5
    return temp;
}
     56c:	c8 01       	movw	r24, r16
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	08 95       	ret

00000580 <setupHardware>:

void setupHardware(void) {

    /* Disable wtachdog */
    MCUSR &= ~(1 << WDRF);
     580:	84 b7       	in	r24, 0x34	; 52
     582:	87 7f       	andi	r24, 0xF7	; 247
     584:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	a8 95       	wdr
     58c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     590:	88 61       	ori	r24, 0x18	; 24
     592:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     596:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     59a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	80 e8       	ldi	r24, 0x80	; 128
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     5a8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
     5ac:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
    /* Disable prescaler */
    clock_prescale_set(clock_div_1);

    /* Set !SS and SCK output, all others input */
    DDRB = (1<<SS)|(1<<SCK);
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	84 b9       	out	0x04, r24	; 4
    //bit_set(DDRB,SS);
    //bit_set(DDRB,SCK);
    bit_set(PORTB, SS);/* Set !SS high (slave not enabled) */
     5b2:	28 9a       	sbi	0x05, 0	; 5
    bit_clear(PORTB, SCK);
     5b4:	29 98       	cbi	0x05, 1	; 5

    /* Set timer1 to count 1 second */
    TCNT1 = 0x00;
     5b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
     5ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
    /* PWM output to channel A, pin PC6 */
    TCCR1A = 0b10000010;
     5be:	82 e8       	ldi	r24, 0x82	; 130
     5c0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
    /*  Set prescaler to divide by 256 for TMR1 */
    TCCR1B = 0b11011100;
     5c4:	8c ed       	ldi	r24, 0xDC	; 220
     5c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
    TIMSK1 = (1<<2);
     5ca:	84 e0       	ldi	r24, 0x04	; 4
     5cc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__EEPROM_REGION_LENGTH__+0x7f006f>
    ICR1 = _ICR1;
     5d0:	8a e6       	ldi	r24, 0x6A	; 106
     5d2:	98 e1       	ldi	r25, 0x18	; 24
     5d4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__EEPROM_REGION_LENGTH__+0x7f0087>
     5d8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
    OCR1B = 1;
     5dc:	21 e0       	ldi	r18, 0x01	; 1
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__EEPROM_REGION_LENGTH__+0x7f008b>
     5e4:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__EEPROM_REGION_LENGTH__+0x7f008a>
    OCR1A = _ICR1;
     5e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
     5ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>

    /* PC6 = Relay */
    DDRC   = 0b01000000;
     5f0:	80 e4       	ldi	r24, 0x40	; 64
     5f2:	87 b9       	out	0x07, r24	; 7
    PORTC  = 0x00;
     5f4:	18 b8       	out	0x08, r1	; 8
    DDRD   = 0x00;
     5f6:	1a b8       	out	0x0a, r1	; 10

    /* Enable SPI, Master, set clock rate fck/2 */
    SPCR = (1<<SPE) | (1<<MSTR);
     5f8:	80 e5       	ldi	r24, 0x50	; 80
     5fa:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1<<SPI2X);
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	8d bd       	out	0x2d, r24	; 45

    /* Initialize USB */
    USB_Init();
     600:	7a d3       	rcall	.+1780   	; 0xcf6 <USB_Init>
    CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     602:	66 e7       	ldi	r22, 0x76	; 118
     604:	71 e0       	ldi	r23, 0x01	; 1
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	ab c6       	rjmp	.+3414   	; 0x1362 <CDC_Device_CreateStream>

0000060c <approx_pwm>:
/* Get PWM frequency from target temperature */
uint16_t approx_pwm(uint16_t target)
{
    int32_t t;
	t = ((_ICR1*(target-room_temp)) / (MAXTEMP*4));
    return (uint16_t)CLAMP(t,0,_ICR1);
     60c:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <room_temp>
     610:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <room_temp+0x1>
     614:	82 1b       	sub	r24, r18
     616:	93 0b       	sbc	r25, r19
     618:	6a e6       	ldi	r22, 0x6A	; 106
     61a:	78 e1       	ldi	r23, 0x18	; 24
     61c:	66 d7       	rcall	.+3788   	; 0x14ea <__mulhi3>
     61e:	60 e5       	ldi	r22, 0x50	; 80
     620:	75 e0       	ldi	r23, 0x05	; 5
     622:	8d d7       	rcall	.+3866   	; 0x153e <__udivmodhi4>
     624:	cb 01       	movw	r24, r22
}
     626:	08 95       	ret

00000628 <pid>:


uint16_t pid(uint16_t target, uint16_t temp) {
     628:	2f 92       	push	r2
     62a:	3f 92       	push	r3
     62c:	4f 92       	push	r4
     62e:	5f 92       	push	r5
     630:	6f 92       	push	r6
     632:	7f 92       	push	r7
     634:	8f 92       	push	r8
     636:	9f 92       	push	r9
     638:	af 92       	push	r10
     63a:	bf 92       	push	r11
     63c:	cf 92       	push	r12
     63e:	df 92       	push	r13
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	00 d0       	rcall	.+0      	; 0x64e <pid+0x26>
     64e:	00 d0       	rcall	.+0      	; 0x650 <pid+0x28>
     650:	00 d0       	rcall	.+0      	; 0x652 <pid+0x2a>
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
	int32_t error = (int32_t)target - (int32_t)temp;
     656:	4c 01       	movw	r8, r24
     658:	a1 2c       	mov	r10, r1
     65a:	b1 2c       	mov	r11, r1
     65c:	86 1a       	sub	r8, r22
     65e:	97 0a       	sbc	r9, r23
     660:	a1 08       	sbc	r10, r1
     662:	b1 08       	sbc	r11, r1
	if (target == 0) {
     664:	00 97       	sbiw	r24, 0x00	; 0
     666:	49 f4       	brne	.+18     	; 0x67a <pid+0x52>
		integral = 0;
     668:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <integral+0x1>
     66c:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <integral>
		last_error = error;
     670:	90 92 86 01 	sts	0x0186, r9	; 0x800186 <last_error+0x1>
     674:	80 92 85 01 	sts	0x0185, r8	; 0x800185 <last_error>
     678:	94 c0       	rjmp	.+296    	; 0x7a2 <pid+0x17a>
     67a:	7e 83       	std	Y+6, r23	; 0x06
     67c:	6d 83       	std	Y+5, r22	; 0x05
     67e:	1c 01       	movw	r2, r24
		return 0;
	} else {

		int32_t p_term = profile.pid_p * error;
     680:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <profile+0xe>
     684:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <profile+0xf>
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	a5 01       	movw	r20, r10
     68e:	94 01       	movw	r18, r8
     690:	3d d7       	rcall	.+3706   	; 0x150c <__mulsi3>
     692:	2b 01       	movw	r4, r22
     694:	3c 01       	movw	r6, r24
		int32_t i_term = integral * profile.pid_i;
     696:	00 91 87 01 	lds	r16, 0x0187	; 0x800187 <integral>
     69a:	10 91 88 01 	lds	r17, 0x0188	; 0x800188 <integral+0x1>
     69e:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <profile+0x10>
     6a2:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <profile+0x11>
     6a6:	c8 01       	movw	r24, r16
     6a8:	20 d7       	rcall	.+3648   	; 0x14ea <__mulhi3>
     6aa:	9c 01       	movw	r18, r24
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	29 83       	std	Y+1, r18	; 0x01
     6b2:	3a 83       	std	Y+2, r19	; 0x02
     6b4:	4b 83       	std	Y+3, r20	; 0x03
     6b6:	5c 83       	std	Y+4, r21	; 0x04
		int32_t d_term = (last_error - error) * profile.pid_d;
     6b8:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <last_error>
     6bc:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <last_error+0x1>
     6c0:	cb 01       	movw	r24, r22
     6c2:	77 0f       	add	r23, r23
     6c4:	aa 0b       	sbc	r26, r26
     6c6:	bb 0b       	sbc	r27, r27
     6c8:	bc 01       	movw	r22, r24
     6ca:	cd 01       	movw	r24, r26
     6cc:	68 19       	sub	r22, r8
     6ce:	79 09       	sbc	r23, r9
     6d0:	8a 09       	sbc	r24, r10
     6d2:	9b 09       	sbc	r25, r11
     6d4:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <profile+0x12>
     6d8:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <profile+0x13>
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	15 d7       	rcall	.+3626   	; 0x150c <__mulsi3>
     6e2:	6b 01       	movw	r12, r22
     6e4:	7c 01       	movw	r14, r24

		int16_t new_integral = integral + error;
     6e6:	a1 01       	movw	r20, r2
     6e8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ea:	9e 81       	ldd	r25, Y+6	; 0x06
     6ec:	48 1b       	sub	r20, r24
     6ee:	59 0b       	sbc	r21, r25
     6f0:	40 0f       	add	r20, r16
     6f2:	51 1f       	adc	r21, r17
     6f4:	5e 83       	std	Y+6, r21	; 0x06
     6f6:	4d 83       	std	Y+5, r20	; 0x05
        /* Clamp integral to a reasonable value */
        new_integral = CLAMP(new_integral,-4*100,4*100);
     6f8:	40 37       	cpi	r20, 0x70	; 112
     6fa:	5e 4f       	sbci	r21, 0xFE	; 254
     6fc:	24 f4       	brge	.+8      	; 0x706 <pid+0xde>
     6fe:	20 e7       	ldi	r18, 0x70	; 112
     700:	3e ef       	ldi	r19, 0xFE	; 254
     702:	3e 83       	std	Y+6, r19	; 0x06
     704:	2d 83       	std	Y+5, r18	; 0x05
     706:	4d 81       	ldd	r20, Y+5	; 0x05
     708:	5e 81       	ldd	r21, Y+6	; 0x06
     70a:	41 39       	cpi	r20, 0x91	; 145
     70c:	51 40       	sbci	r21, 0x01	; 1
     70e:	24 f0       	brlt	.+8      	; 0x718 <pid+0xf0>
     710:	20 e9       	ldi	r18, 0x90	; 144
     712:	31 e0       	ldi	r19, 0x01	; 1
     714:	3e 83       	std	Y+6, r19	; 0x06
     716:	2d 83       	std	Y+5, r18	; 0x05

		last_error = error;
     718:	90 92 86 01 	sts	0x0186, r9	; 0x800186 <last_error+0x1>
     71c:	80 92 85 01 	sts	0x0185, r8	; 0x800185 <last_error>

		int32_t result = approx_pwm(target) + p_term + i_term + d_term;
     720:	c1 01       	movw	r24, r2
     722:	74 df       	rcall	.-280    	; 0x60c <approx_pwm>
     724:	48 0e       	add	r4, r24
     726:	59 1e       	adc	r5, r25
     728:	61 1c       	adc	r6, r1
     72a:	71 1c       	adc	r7, r1
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	ab 81       	ldd	r26, Y+3	; 0x03
     732:	bc 81       	ldd	r27, Y+4	; 0x04
     734:	84 0d       	add	r24, r4
     736:	95 1d       	adc	r25, r5
     738:	a6 1d       	adc	r26, r6
     73a:	b7 1d       	adc	r27, r7
     73c:	c8 0e       	add	r12, r24
     73e:	d9 1e       	adc	r13, r25
     740:	ea 1e       	adc	r14, r26
     742:	fb 1e       	adc	r15, r27

        /* Avoid integral buildup */
		if ((result >= _ICR1 && new_integral < integral) || (result < 0 && new_integral > integral) || (result <= _ICR1 && result >= 0)) {
     744:	3a e6       	ldi	r19, 0x6A	; 106
     746:	c3 16       	cp	r12, r19
     748:	38 e1       	ldi	r19, 0x18	; 24
     74a:	d3 06       	cpc	r13, r19
     74c:	e1 04       	cpc	r14, r1
     74e:	f1 04       	cpc	r15, r1
     750:	34 f0       	brlt	.+12     	; 0x75e <pid+0x136>
     752:	4d 81       	ldd	r20, Y+5	; 0x05
     754:	5e 81       	ldd	r21, Y+6	; 0x06
     756:	40 17       	cp	r20, r16
     758:	51 07       	cpc	r21, r17
     75a:	7c f0       	brlt	.+30     	; 0x77a <pid+0x152>
     75c:	07 c0       	rjmp	.+14     	; 0x76c <pid+0x144>
     75e:	f7 fe       	sbrs	r15, 7
     760:	05 c0       	rjmp	.+10     	; 0x76c <pid+0x144>
     762:	8d 81       	ldd	r24, Y+5	; 0x05
     764:	9e 81       	ldd	r25, Y+6	; 0x06
     766:	08 17       	cp	r16, r24
     768:	19 07       	cpc	r17, r25
     76a:	3c f0       	brlt	.+14     	; 0x77a <pid+0x152>
     76c:	9b e6       	ldi	r25, 0x6B	; 107
     76e:	c9 16       	cp	r12, r25
     770:	98 e1       	ldi	r25, 0x18	; 24
     772:	d9 06       	cpc	r13, r25
     774:	e1 04       	cpc	r14, r1
     776:	f1 04       	cpc	r15, r1
     778:	30 f4       	brcc	.+12     	; 0x786 <pid+0x15e>
            integral = new_integral;
     77a:	2d 81       	ldd	r18, Y+5	; 0x05
     77c:	3e 81       	ldd	r19, Y+6	; 0x06
     77e:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <integral+0x1>
     782:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <integral>
		}

        /* Clamp the output value */
        return (uint16_t)(CLAMP(result,0,_ICR1));
     786:	3b e6       	ldi	r19, 0x6B	; 107
     788:	c3 16       	cp	r12, r19
     78a:	38 e1       	ldi	r19, 0x18	; 24
     78c:	d3 06       	cpc	r13, r19
     78e:	e1 04       	cpc	r14, r1
     790:	f1 04       	cpc	r15, r1
     792:	24 f4       	brge	.+8      	; 0x79c <pid+0x174>
     794:	f7 fc       	sbrc	r15, 7
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <pid+0x17a>
     798:	c6 01       	movw	r24, r12
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <pid+0x17e>
     79c:	8a e6       	ldi	r24, 0x6A	; 106
     79e:	98 e1       	ldi	r25, 0x18	; 24
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <pid+0x17e>
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     7a6:	26 96       	adiw	r28, 0x06	; 6
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	bf 90       	pop	r11
     7c4:	af 90       	pop	r10
     7c6:	9f 90       	pop	r9
     7c8:	8f 90       	pop	r8
     7ca:	7f 90       	pop	r7
     7cc:	6f 90       	pop	r6
     7ce:	5f 90       	pop	r5
     7d0:	4f 90       	pop	r4
     7d2:	3f 90       	pop	r3
     7d4:	2f 90       	pop	r2
     7d6:	08 95       	ret

000007d8 <main>:

int main(void) {
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	00 d0       	rcall	.+0      	; 0x7de <main+0x6>
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62

    uint8_t target_update = 0;
    bool tx_flag = 0;
    uint16_t temp = 0;
    uint16_t target = 0;
    uint16_t timer = 0;/* Timer for various reflow stages */
     7e2:	1a 82       	std	Y+2, r1	; 0x02
     7e4:	19 82       	std	Y+1, r1	; 0x01

    setupHardware();
     7e6:	cc de       	rcall	.-616    	; 0x580 <setupHardware>
    set_profile();
     7e8:	bd dc       	rcall	.-1670   	; 0x164 <set_profile>
     7ea:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     7ec:	81 e0       	ldi	r24, 0x01	; 1
	GlobalInterruptEnable();

    reflow_state = T_START;
     7ee:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <reflow_state>
    temp = read_sensor();
     7f2:	5f de       	rcall	.-834    	; 0x4b2 <read_sensor>
     7f4:	8c 01       	movw	r16, r24
     7f6:	be 01       	movw	r22, r28
    target = target_temp(temp, &timer);
     7f8:	6f 5f       	subi	r22, 0xFF	; 255
     7fa:	7f 4f       	sbci	r23, 0xFF	; 255
     7fc:	87 dd       	rcall	.-1266   	; 0x30c <target_temp>
     7fe:	78 2e       	mov	r7, r24
     800:	c9 2e       	mov	r12, r25
     802:	89 81       	ldd	r24, Y+1	; 0x01
    timer++;
     804:	9a 81       	ldd	r25, Y+2	; 0x02
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	9a 83       	std	Y+2, r25	; 0x02
     80a:	89 83       	std	Y+1, r24	; 0x01
     80c:	61 2c       	mov	r6, r1
}

int main(void) {

    uint8_t target_update = 0;
    bool tx_flag = 0;
     80e:	d1 2c       	mov	r13, r1
	}
}

int main(void) {

    uint8_t target_update = 0;
     810:	85 e4       	ldi	r24, 0x45	; 69
        }

        if (usb_connected && tx_flag) {
            tx_flag = 0;
            /* Send temp temperature */
            fprintf(&USBSerialStream, "temp:%u,room:%u,target:%u,PWM:%u,state:%d", temp, room_temp, target, OCR1A, reflow_state);
     812:	a8 2e       	mov	r10, r24
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	b8 2e       	mov	r11, r24
     818:	96 e7       	ldi	r25, 0x76	; 118
     81a:	e9 2e       	mov	r14, r25
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	f9 2e       	mov	r15, r25
     820:	2f e6       	ldi	r18, 0x6F	; 111
            if (PID_debug)
                fprintf(&USBSerialStream, ",I:%d", integral);
     822:	82 2e       	mov	r8, r18
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	92 2e       	mov	r9, r18
     828:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <usb_connected>
    target = target_temp(temp, &timer);
    timer++;

    while(1)
    {
        if (usb_connected) {
     82c:	88 23       	and	r24, r24
     82e:	29 f0       	breq	.+10     	; 0x83a <main+0x62>
            /*  Check mail */
            usb_rx();
     830:	15 de       	rcall	.-982    	; 0x45c <usb_rx>
            CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	49 d5       	rcall	.+2706   	; 0x12ca <CDC_Device_USBTask>
     838:	a4 d4       	rcall	.+2376   	; 0x1182 <USB_USBTask>
            USB_USBTask();
     83a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <usb_connected>
        }

        if (usb_connected && tx_flag) {
     83e:	88 23       	and	r24, r24
     840:	d9 f1       	breq	.+118    	; 0x8b8 <main+0xe0>
     842:	66 20       	and	r6, r6
     844:	c9 f1       	breq	.+114    	; 0x8b8 <main+0xe0>
     846:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
            tx_flag = 0;
            /* Send temp temperature */
            fprintf(&USBSerialStream, "temp:%u,room:%u,target:%u,PWM:%u,state:%d", temp, room_temp, target, OCR1A, reflow_state);
     84a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
     84e:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <reflow_state>
     852:	1f 92       	push	r1
     854:	2f 93       	push	r18
     856:	9f 93       	push	r25
     858:	8f 93       	push	r24
     85a:	cf 92       	push	r12
     85c:	7f 92       	push	r7
     85e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <room_temp+0x1>
     862:	8f 93       	push	r24
     864:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <room_temp>
     868:	8f 93       	push	r24
     86a:	1f 93       	push	r17
     86c:	0f 93       	push	r16
     86e:	bf 92       	push	r11
     870:	af 92       	push	r10
     872:	ff 92       	push	r15
     874:	ef 92       	push	r14
     876:	bb d6       	rcall	.+3446   	; 0x15ee <fprintf>
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
            if (PID_debug)
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <PID_debug>
     886:	88 23       	and	r24, r24
     888:	89 f0       	breq	.+34     	; 0x8ac <main+0xd4>
     88a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <integral+0x1>
                fprintf(&USBSerialStream, ",I:%d", integral);
     88e:	8f 93       	push	r24
     890:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <integral>
     894:	8f 93       	push	r24
     896:	9f 92       	push	r9
     898:	8f 92       	push	r8
     89a:	ff 92       	push	r15
     89c:	ef 92       	push	r14
     89e:	a7 d6       	rcall	.+3406   	; 0x15ee <fprintf>
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	66 e7       	ldi	r22, 0x76	; 118
            fprintf(&USBSerialStream, "\n");
     8ae:	71 e0       	ldi	r23, 0x01	; 1
     8b0:	8a e0       	ldi	r24, 0x0A	; 10
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	ab d6       	rcall	.+3414   	; 0x160c <fputc>
     8b6:	61 2c       	mov	r6, r1
     8b8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <update_pid>
        }
        if (update_pid) {
     8bc:	88 23       	and	r24, r24
     8be:	09 f4       	brne	.+2      	; 0x8c2 <main+0xea>
     8c0:	b3 cf       	rjmp	.-154    	; 0x828 <main+0x50>
     8c2:	55 24       	eor	r5, r5
     8c4:	53 94       	inc	r5
            /* Update target once per second */
            if (target_update++ == 5) {
     8c6:	5d 0c       	add	r5, r13
     8c8:	95 e0       	ldi	r25, 0x05	; 5
     8ca:	d9 12       	cpse	r13, r25
     8cc:	0f c0       	rjmp	.+30     	; 0x8ec <main+0x114>
     8ce:	be 01       	movw	r22, r28
                target_update = 0;
                target = target_temp(temp, &timer);
     8d0:	6f 5f       	subi	r22, 0xFF	; 255
     8d2:	7f 4f       	sbci	r23, 0xFF	; 255
     8d4:	c8 01       	movw	r24, r16
     8d6:	1a dd       	rcall	.-1484   	; 0x30c <target_temp>
     8d8:	78 2e       	mov	r7, r24
     8da:	c9 2e       	mov	r12, r25
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
                timer++;
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	9a 83       	std	Y+2, r25	; 0x02
     8e4:	89 83       	std	Y+1, r24	; 0x01
                tx_flag = 1;
     8e6:	66 24       	eor	r6, r6
     8e8:	63 94       	inc	r6
            fprintf(&USBSerialStream, "\n");
        }
        if (update_pid) {
            /* Update target once per second */
            if (target_update++ == 5) {
                target_update = 0;
     8ea:	51 2c       	mov	r5, r1
                target = target_temp(temp, &timer);
                timer++;
                tx_flag = 1;
            }
            /* Read the current temperature, updates temp and room_temp */
            temp = read_sensor();
     8ec:	e2 dd       	rcall	.-1084   	; 0x4b2 <read_sensor>
     8ee:	8c 01       	movw	r16, r24
     8f0:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <update_pid>
            update_pid = 0;
     8f4:	bc 01       	movw	r22, r24
            OCR1A = pid(target, temp);
     8f6:	87 2d       	mov	r24, r7
     8f8:	9c 2d       	mov	r25, r12
     8fa:	96 de       	rcall	.-724    	; 0x628 <pid>
     8fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__EEPROM_REGION_LENGTH__+0x7f0089>
     900:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__EEPROM_REGION_LENGTH__+0x7f0088>
     904:	d5 2c       	mov	r13, r5
     906:	90 cf       	rjmp	.-224    	; 0x828 <main+0x50>

00000908 <__vector_16>:
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
        }
    }
}


ISR(TIMER1_COMPB_vect) {
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	8f 93       	push	r24
    /* Set PWM */
    update_pid = 1;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <update_pid>
}
     91a:	8f 91       	pop	r24
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <EVENT_USB_Device_Connect>:


/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    usb_connected = 1;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <usb_connected>
     92c:	08 95       	ret

0000092e <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    usb_connected = 0;
     92e:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <usb_connected>
     932:	08 95       	ret

00000934 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	3e c4       	rjmp	.+2172   	; 0x11b6 <CDC_Device_ConfigureEndpoints>

0000093a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	25 c5       	rjmp	.+2634   	; 0x138a <CDC_Device_ProcessControlRequest>

00000940 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     940:	29 2f       	mov	r18, r25
     942:	33 27       	eor	r19, r19
     944:	22 30       	cpi	r18, 0x02	; 2
     946:	31 05       	cpc	r19, r1
     948:	59 f0       	breq	.+22     	; 0x960 <CALLBACK_USB_GetDescriptor+0x20>
     94a:	23 30       	cpi	r18, 0x03	; 3
     94c:	31 05       	cpc	r19, r1
     94e:	69 f0       	breq	.+26     	; 0x96a <CALLBACK_USB_GetDescriptor+0x2a>
     950:	21 30       	cpi	r18, 0x01	; 1
     952:	31 05       	cpc	r19, r1
     954:	e9 f4       	brne	.+58     	; 0x990 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     956:	82 e1       	ldi	r24, 0x12	; 18
     958:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     95a:	2a e1       	ldi	r18, 0x1A	; 26
     95c:	31 e0       	ldi	r19, 0x01	; 1
     95e:	1c c0       	rjmp	.+56     	; 0x998 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     960:	8e e3       	ldi	r24, 0x3E	; 62
     962:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     964:	2c ed       	ldi	r18, 0xDC	; 220
     966:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     968:	17 c0       	rjmp	.+46     	; 0x998 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     96a:	99 27       	eor	r25, r25
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	91 05       	cpc	r25, r1
     970:	49 f0       	breq	.+18     	; 0x984 <CALLBACK_USB_GetDescriptor+0x44>
     972:	28 f0       	brcs	.+10     	; 0x97e <CALLBACK_USB_GetDescriptor+0x3e>
     974:	02 97       	sbiw	r24, 0x02	; 2
     976:	61 f4       	brne	.+24     	; 0x990 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     978:	e8 e8       	ldi	r30, 0x88	; 136
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	05 c0       	rjmp	.+10     	; 0x988 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     97e:	e8 ed       	ldi	r30, 0xD8	; 216
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	02 c0       	rjmp	.+4      	; 0x988 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     984:	e8 eb       	ldi	r30, 0xB8	; 184
     986:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     988:	84 91       	lpm	r24, Z
     98a:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     98c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     98e:	04 c0       	rjmp	.+8      	; 0x998 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     998:	fa 01       	movw	r30, r20
     99a:	31 83       	std	Z+1, r19	; 0x01
     99c:	20 83       	st	Z, r18
	return Size;
}
     99e:	08 95       	ret

000009a0 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9a0:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <USB_ControlRequest+0x6>
     9a4:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <USB_ControlRequest+0x7>
     9a8:	26 17       	cp	r18, r22
     9aa:	37 07       	cpc	r19, r23
     9ac:	48 f0       	brcs	.+18     	; 0x9c0 <Endpoint_Write_Control_Stream_LE+0x20>
     9ae:	61 15       	cp	r22, r1
     9b0:	71 05       	cpc	r23, r1
     9b2:	39 f4       	brne	.+14     	; 0x9c2 <Endpoint_Write_Control_Stream_LE+0x22>
     9b4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9b8:	2e 77       	andi	r18, 0x7E	; 126
     9ba:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <Endpoint_Write_Control_Stream_LE+0x22>
     9c0:	b9 01       	movw	r22, r18
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	61 15       	cp	r22, r1
     9c8:	71 05       	cpc	r23, r1
     9ca:	61 f1       	breq	.+88     	; 0xa24 <Endpoint_Write_Control_Stream_LE+0x84>
     9cc:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_DeviceState>
     9d0:	88 23       	and	r24, r24
     9d2:	c9 f1       	breq	.+114    	; 0xa46 <Endpoint_Write_Control_Stream_LE+0xa6>
     9d4:	85 30       	cpi	r24, 0x05	; 5
     9d6:	c9 f1       	breq	.+114    	; 0xa4a <Endpoint_Write_Control_Stream_LE+0xaa>
     9d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9dc:	83 fd       	sbrc	r24, 3
     9de:	31 c0       	rjmp	.+98     	; 0xa42 <Endpoint_Write_Control_Stream_LE+0xa2>
     9e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9e4:	82 fd       	sbrc	r24, 2
     9e6:	27 c0       	rjmp	.+78     	; 0xa36 <Endpoint_Write_Control_Stream_LE+0x96>
     9e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9ec:	80 ff       	sbrs	r24, 0
     9ee:	eb cf       	rjmp	.-42     	; 0x9c6 <Endpoint_Write_Control_Stream_LE+0x26>
     9f0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	61 15       	cp	r22, r1
     9f8:	71 05       	cpc	r23, r1
     9fa:	51 f0       	breq	.+20     	; 0xa10 <Endpoint_Write_Control_Stream_LE+0x70>
     9fc:	88 30       	cpi	r24, 0x08	; 8
     9fe:	91 05       	cpc	r25, r1
     a00:	38 f4       	brcc	.+14     	; 0xa10 <Endpoint_Write_Control_Stream_LE+0x70>
     a02:	21 91       	ld	r18, Z+
     a04:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     a08:	61 50       	subi	r22, 0x01	; 1
     a0a:	71 09       	sbc	r23, r1
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	f3 cf       	rjmp	.-26     	; 0x9f6 <Endpoint_Write_Control_Stream_LE+0x56>
     a10:	21 e0       	ldi	r18, 0x01	; 1
     a12:	08 97       	sbiw	r24, 0x08	; 8
     a14:	09 f0       	breq	.+2      	; 0xa18 <Endpoint_Write_Control_Stream_LE+0x78>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a1c:	8e 77       	andi	r24, 0x7E	; 126
     a1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a22:	d1 cf       	rjmp	.-94     	; 0x9c6 <Endpoint_Write_Control_Stream_LE+0x26>
     a24:	21 11       	cpse	r18, r1
     a26:	d2 cf       	rjmp	.-92     	; 0x9cc <Endpoint_Write_Control_Stream_LE+0x2c>
     a28:	06 c0       	rjmp	.+12     	; 0xa36 <Endpoint_Write_Control_Stream_LE+0x96>
     a2a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_DeviceState>
     a2e:	88 23       	and	r24, r24
     a30:	51 f0       	breq	.+20     	; 0xa46 <Endpoint_Write_Control_Stream_LE+0xa6>
     a32:	85 30       	cpi	r24, 0x05	; 5
     a34:	51 f0       	breq	.+20     	; 0xa4a <Endpoint_Write_Control_Stream_LE+0xaa>
     a36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a3a:	82 ff       	sbrs	r24, 2
     a3c:	f6 cf       	rjmp	.-20     	; 0xa2a <Endpoint_Write_Control_Stream_LE+0x8a>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	08 95       	ret
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	08 95       	ret
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	08 95       	ret
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	08 95       	ret

00000a4e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a4e:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <USB_ControlRequest+0x6>
     a52:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <USB_ControlRequest+0x7>
     a56:	26 17       	cp	r18, r22
     a58:	37 07       	cpc	r19, r23
     a5a:	48 f0       	brcs	.+18     	; 0xa6e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	39 f4       	brne	.+14     	; 0xa70 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a62:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a66:	2e 77       	andi	r18, 0x7E	; 126
     a68:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <Endpoint_Write_Control_PStream_LE+0x22>
     a6e:	b9 01       	movw	r22, r18
     a70:	fc 01       	movw	r30, r24
     a72:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a74:	61 15       	cp	r22, r1
     a76:	71 05       	cpc	r23, r1
     a78:	69 f1       	breq	.+90     	; 0xad4 <Endpoint_Write_Control_PStream_LE+0x86>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a7a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a7e:	88 23       	and	r24, r24
     a80:	d1 f1       	breq	.+116    	; 0xaf6 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a82:	85 30       	cpi	r24, 0x05	; 5
     a84:	d1 f1       	breq	.+116    	; 0xafa <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a8a:	83 fd       	sbrc	r24, 3
     a8c:	32 c0       	rjmp	.+100    	; 0xaf2 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     a92:	82 fd       	sbrc	r24, 2
     a94:	28 c0       	rjmp	.+80     	; 0xae6 <Endpoint_Write_Control_PStream_LE+0x98>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
     a9a:	80 ff       	sbrs	r24, 0
     a9c:	eb cf       	rjmp	.-42     	; 0xa74 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     a9e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     aa2:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     aa4:	61 15       	cp	r22, r1
     aa6:	71 05       	cpc	r23, r1
     aa8:	59 f0       	breq	.+22     	; 0xac0 <Endpoint_Write_Control_PStream_LE+0x72>
     aaa:	88 30       	cpi	r24, 0x08	; 8
     aac:	91 05       	cpc	r25, r1
     aae:	40 f4       	brcc	.+16     	; 0xac0 <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ab0:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ab2:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     ab6:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     ab8:	61 50       	subi	r22, 0x01	; 1
     aba:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	f2 cf       	rjmp	.-28     	; 0xaa4 <Endpoint_Write_Control_PStream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     ac0:	21 e0       	ldi	r18, 0x01	; 1
     ac2:	08 97       	sbiw	r24, 0x08	; 8
     ac4:	09 f0       	breq	.+2      	; 0xac8 <Endpoint_Write_Control_PStream_LE+0x7a>
     ac6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ac8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     acc:	8e 77       	andi	r24, 0x7E	; 126
     ace:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ad2:	d0 cf       	rjmp	.-96     	; 0xa74 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ad4:	21 11       	cpse	r18, r1
     ad6:	d1 cf       	rjmp	.-94     	; 0xa7a <Endpoint_Write_Control_PStream_LE+0x2c>
     ad8:	06 c0       	rjmp	.+12     	; 0xae6 <Endpoint_Write_Control_PStream_LE+0x98>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ada:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ade:	88 23       	and	r24, r24
     ae0:	51 f0       	breq	.+20     	; 0xaf6 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ae2:	85 30       	cpi	r24, 0x05	; 5
     ae4:	51 f0       	breq	.+20     	; 0xafa <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ae6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     aea:	82 ff       	sbrs	r24, 2
     aec:	f6 cf       	rjmp	.-20     	; 0xada <Endpoint_Write_Control_PStream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     afa:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     afc:	08 95       	ret

00000afe <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     afe:	98 2f       	mov	r25, r24
     b00:	95 30       	cpi	r25, 0x05	; 5
     b02:	68 f5       	brcc	.+90     	; 0xb5e <Endpoint_ConfigureEndpoint_Prv+0x60>
     b04:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     b08:	98 17       	cp	r25, r24
     b0a:	39 f0       	breq	.+14     	; 0xb1a <Endpoint_ConfigureEndpoint_Prv+0x1c>
     b0c:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     b10:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     b14:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     b18:	03 c0       	rjmp	.+6      	; 0xb20 <Endpoint_ConfigureEndpoint_Prv+0x22>
     b1a:	24 2f       	mov	r18, r20
     b1c:	76 2f       	mov	r23, r22
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	21 fd       	sbrc	r18, 1
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     b24:	9f 5f       	subi	r25, 0xFF	; 255
     b26:	ec cf       	rjmp	.-40     	; 0xb00 <Endpoint_ConfigureEndpoint_Prv+0x2>
     b28:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b2c:	3e 7f       	andi	r19, 0xFE	; 254
     b2e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b32:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     b36:	3d 7f       	andi	r19, 0xFD	; 253
     b38:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     b3c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b40:	31 60       	ori	r19, 0x01	; 1
     b42:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     b46:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     b4a:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     b4e:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     b52:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
     b56:	27 fd       	sbrc	r18, 7
     b58:	e5 cf       	rjmp	.-54     	; 0xb24 <Endpoint_ConfigureEndpoint_Prv+0x26>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	08 95       	ret
     b5e:	8f 70       	andi	r24, 0x0F	; 15
     b60:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	08 95       	ret

00000b68 <Endpoint_ConfigureEndpointTable>:
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	06 2f       	mov	r16, r22
     b72:	ec 01       	movw	r28, r24
     b74:	10 e0       	ldi	r17, 0x00	; 0
     b76:	10 17       	cp	r17, r16
     b78:	71 f1       	breq	.+92     	; 0xbd6 <Endpoint_ConfigureEndpointTable+0x6e>
     b7a:	98 81       	ld	r25, Y
     b7c:	91 11       	cpse	r25, r1
     b7e:	03 c0       	rjmp	.+6      	; 0xb86 <Endpoint_ConfigureEndpointTable+0x1e>
     b80:	1f 5f       	subi	r17, 0xFF	; 255
     b82:	25 96       	adiw	r28, 0x05	; 5
     b84:	f8 cf       	rjmp	.-16     	; 0xb76 <Endpoint_ConfigureEndpointTable+0xe>
     b86:	2c 81       	ldd	r18, Y+4	; 0x04
     b88:	a9 81       	ldd	r26, Y+1	; 0x01
     b8a:	ba 81       	ldd	r27, Y+2	; 0x02
     b8c:	6b 81       	ldd	r22, Y+3	; 0x03
     b8e:	89 2f       	mov	r24, r25
     b90:	8f 70       	andi	r24, 0x0F	; 15
     b92:	85 30       	cpi	r24, 0x05	; 5
     b94:	10 f0       	brcs	.+4      	; 0xb9a <Endpoint_ConfigureEndpointTable+0x32>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	1f c0       	rjmp	.+62     	; 0xbd8 <Endpoint_ConfigureEndpointTable+0x70>
     b9a:	22 30       	cpi	r18, 0x02	; 2
     b9c:	10 f4       	brcc	.+4      	; 0xba2 <Endpoint_ConfigureEndpointTable+0x3a>
     b9e:	42 e0       	ldi	r20, 0x02	; 2
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <Endpoint_ConfigureEndpointTable+0x3c>
     ba2:	46 e0       	ldi	r20, 0x06	; 6
     ba4:	e8 e0       	ldi	r30, 0x08	; 8
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	ea 17       	cp	r30, r26
     bac:	fb 07       	cpc	r31, r27
     bae:	20 f4       	brcc	.+8      	; 0xbb8 <Endpoint_ConfigureEndpointTable+0x50>
     bb0:	2f 5f       	subi	r18, 0xFF	; 255
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	f9 cf       	rjmp	.-14     	; 0xbaa <Endpoint_ConfigureEndpointTable+0x42>
     bb8:	22 95       	swap	r18
     bba:	20 7f       	andi	r18, 0xF0	; 240
     bbc:	42 2b       	or	r20, r18
     bbe:	62 95       	swap	r22
     bc0:	66 0f       	add	r22, r22
     bc2:	66 0f       	add	r22, r22
     bc4:	60 7c       	andi	r22, 0xC0	; 192
     bc6:	99 1f       	adc	r25, r25
     bc8:	99 27       	eor	r25, r25
     bca:	99 1f       	adc	r25, r25
     bcc:	69 2b       	or	r22, r25
     bce:	97 df       	rcall	.-210    	; 0xafe <Endpoint_ConfigureEndpoint_Prv>
     bd0:	81 11       	cpse	r24, r1
     bd2:	d6 cf       	rjmp	.-84     	; 0xb80 <Endpoint_ConfigureEndpointTable+0x18>
     bd4:	e0 cf       	rjmp	.-64     	; 0xb96 <Endpoint_ConfigureEndpointTable+0x2e>
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret

00000be2 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     be2:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <USB_ControlRequest>
     be6:	87 ff       	sbrs	r24, 7
     be8:	11 c0       	rjmp	.+34     	; 0xc0c <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     bee:	82 fd       	sbrc	r24, 2
     bf0:	05 c0       	rjmp	.+10     	; 0xbfc <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bf2:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_DeviceState>
     bf6:	81 11       	cpse	r24, r1
     bf8:	f8 cf       	rjmp	.-16     	; 0xbea <Endpoint_ClearStatusStage+0x8>
     bfa:	11 c0       	rjmp	.+34     	; 0xc1e <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c00:	8b 77       	andi	r24, 0x7B	; 123
     c02:	0b c0       	rjmp	.+22     	; 0xc1a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c04:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_DeviceState>
     c08:	88 23       	and	r24, r24
     c0a:	49 f0       	breq	.+18     	; 0xc1e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     c10:	80 ff       	sbrs	r24, 0
     c12:	f8 cf       	rjmp	.-16     	; 0xc04 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c18:	8e 77       	andi	r24, 0x7E	; 126
     c1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     c1e:	08 95       	ret

00000c20 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     c20:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     c24:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
     c28:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c2a:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     c2e:	84 2f       	mov	r24, r20
     c30:	81 70       	andi	r24, 0x01	; 1
     c32:	40 ff       	sbrs	r20, 0
     c34:	23 c0       	rjmp	.+70     	; 0xc7c <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     c3a:	80 fd       	sbrc	r24, 0
     c3c:	1d c0       	rjmp	.+58     	; 0xc78 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c3e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c42:	88 23       	and	r24, r24
     c44:	99 f0       	breq	.+38     	; 0xc6c <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c46:	85 30       	cpi	r24, 0x05	; 5
     c48:	99 f0       	breq	.+38     	; 0xc70 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c4a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     c4e:	85 fd       	sbrc	r24, 5
     c50:	11 c0       	rjmp	.+34     	; 0xc74 <Endpoint_WaitUntilReady+0x54>
     c52:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     c56:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c5a:	24 17       	cp	r18, r20
     c5c:	35 07       	cpc	r19, r21
     c5e:	29 f3       	breq	.-54     	; 0xc2a <Endpoint_WaitUntilReady+0xa>
     c60:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c62:	11 f0       	breq	.+4      	; 0xc68 <Endpoint_WaitUntilReady+0x48>
     c64:	9a 01       	movw	r18, r20
     c66:	e1 cf       	rjmp	.-62     	; 0xc2a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     c68:	84 e0       	ldi	r24, 0x04	; 4
     c6a:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c7c:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     c80:	42 ff       	sbrs	r20, 2
     c82:	dd cf       	rjmp	.-70     	; 0xc3e <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     c84:	08 95       	ret

00000c86 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c86:	40 d0       	rcall	.+128    	; 0xd08 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c88:	42 d0       	rcall	.+132    	; 0xd0e <USB_INT_ClearAllInterrupts>
     c8a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c8e:	8f 77       	andi	r24, 0x7F	; 127
     c90:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     c94:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
     c98:	80 68       	ori	r24, 0x80	; 128
     c9a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     c9e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     ca2:	8f 7d       	andi	r24, 0xDF	; 223
     ca4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     ca8:	19 bc       	out	0x29, r1	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     caa:	82 e0       	ldi	r24, 0x02	; 2
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     cac:	89 bd       	out	0x29, r24	; 41
     cae:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     cb0:	00 fe       	sbrs	r0, 0
     cb2:	fd cf       	rjmp	.-6      	; 0xcae <USB_ResetInterface+0x28>
     cb4:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     cb8:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     cbc:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     cc0:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     cc4:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	19 df       	rcall	.-462    	; 0xafe <Endpoint_ConfigureEndpoint_Prv>
     ccc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     cd0:	8e 7f       	andi	r24, 0xFE	; 254
     cd2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     cd6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     cda:	81 60       	ori	r24, 0x01	; 1
     cdc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     ce0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     ce4:	88 60       	ori	r24, 0x08	; 8
     ce6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     cea:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     cee:	8e 7f       	andi	r24, 0xFE	; 254
     cf0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     cf4:	08 95       	ret

00000cf6 <USB_Init>:
     cf6:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8e 7f       	andi	r24, 0xFE	; 254
     cfe:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <USB_IsInitialized>

	USB_ResetInterface();
     d06:	bf cf       	rjmp	.-130    	; 0xc86 <USB_ResetInterface>

00000d08 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     d08:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     d0c:	08 95       	ret

00000d0e <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     d0e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     d12:	08 95       	ret

00000d14 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     d36:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     d3a:	82 ff       	sbrs	r24, 2
     d3c:	0a c0       	rjmp	.+20     	; 0xd52 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     d3e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     d42:	82 ff       	sbrs	r24, 2
     d44:	06 c0       	rjmp	.+12     	; 0xd52 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     d46:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     d4a:	8b 7f       	andi	r24, 0xFB	; 251
     d4c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     d50:	17 d2       	rcall	.+1070   	; 0x1180 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     d52:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     d56:	80 ff       	sbrs	r24, 0
     d58:	17 c0       	rjmp	.+46     	; 0xd88 <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     d5a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     d5e:	80 ff       	sbrs	r24, 0
     d60:	13 c0       	rjmp	.+38     	; 0xd88 <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     d62:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     d66:	8e 7f       	andi	r24, 0xFE	; 254
     d68:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d6c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     d70:	80 61       	ori	r24, 0x10	; 16
     d72:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     d76:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     d7a:	80 62       	ori	r24, 0x20	; 32
     d7c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d80:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     d82:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     d86:	d3 dd       	rcall	.-1114   	; 0x92e <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     d88:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     d8c:	84 ff       	sbrs	r24, 4
     d8e:	2c c0       	rjmp	.+88     	; 0xde8 <__vector_11+0xd4>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     d90:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     d94:	84 ff       	sbrs	r24, 4
     d96:	28 c0       	rjmp	.+80     	; 0xde8 <__vector_11+0xd4>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d98:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d9e:	09 b4       	in	r0, 0x29	; 41
     da0:	00 fe       	sbrs	r0, 0
     da2:	fd cf       	rjmp	.-6      	; 0xd9e <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     da4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     da8:	8f 7d       	andi	r24, 0xDF	; 223
     daa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     dae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     db2:	8f 7e       	andi	r24, 0xEF	; 239
     db4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     db8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     dbc:	8f 7e       	andi	r24, 0xEF	; 239
     dbe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     dc2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     dc6:	81 60       	ori	r24, 0x01	; 1
     dc8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     dcc:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_Device_ConfigurationNumber>
     dd0:	81 11       	cpse	r24, r1
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <__vector_11+0xcc>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     dd4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     dd8:	87 fd       	sbrc	r24, 7
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <__vector_11+0xcc>
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <__vector_11+0xce>
     de0:	84 e0       	ldi	r24, 0x04	; 4
     de2:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     de6:	9f dd       	rcall	.-1218   	; 0x926 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     de8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     dec:	83 ff       	sbrs	r24, 3
     dee:	27 c0       	rjmp	.+78     	; 0xe3e <__vector_11+0x12a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     df0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     df4:	83 ff       	sbrs	r24, 3
     df6:	23 c0       	rjmp	.+70     	; 0xe3e <__vector_11+0x12a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     df8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     dfc:	87 7f       	andi	r24, 0xF7	; 247
     dfe:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     e08:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e0c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     e10:	8e 7f       	andi	r24, 0xFE	; 254
     e12:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e16:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     e1a:	8e 7f       	andi	r24, 0xFE	; 254
     e1c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     e20:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     e24:	80 61       	ori	r24, 0x10	; 16
     e26:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e2a:	42 e0       	ldi	r20, 0x02	; 2
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	66 de       	rcall	.-820    	; 0xafe <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     e32:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     e36:	88 60       	ori	r24, 0x08	; 8
     e38:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     e3c:	a1 d1       	rcall	.+834    	; 0x1180 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e86:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     e8a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e8c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     e90:	d8 2f       	mov	r29, r24
     e92:	d1 70       	andi	r29, 0x01	; 1
     e94:	80 fd       	sbrc	r24, 0
     e96:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e98:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     e9c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     ea0:	87 7f       	andi	r24, 0xF7	; 247
     ea2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     ea6:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     ea8:	1e d0       	rcall	.+60     	; 0xee6 <USB_Device_ProcessControlRequest>
     eaa:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     eae:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     eb2:	88 60       	ori	r24, 0x08	; 8
     eb4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     eb8:	cd 2b       	or	r28, r29
     eba:	cf 70       	andi	r28, 0x0F	; 15
     ebc:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	aa 97       	sbiw	r28, 0x2a	; 42
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	e9 ea       	ldi	r30, 0xA9	; 169
     efe:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f00:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     f04:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	e1 3b       	cpi	r30, 0xB1	; 177
     f0a:	f2 07       	cpc	r31, r18
     f0c:	c9 f7       	brne	.-14     	; 0xf00 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     f0e:	15 dd       	rcall	.-1494   	; 0x93a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
     f14:	83 ff       	sbrs	r24, 3
     f16:	1c c1       	rjmp	.+568    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     f18:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     f1c:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <USB_ControlRequest+0x1>
     f20:	49 2f       	mov	r20, r25
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	4a 30       	cpi	r20, 0x0A	; 10
     f26:	51 05       	cpc	r21, r1
     f28:	08 f0       	brcs	.+2      	; 0xf2c <USB_Device_ProcessControlRequest+0x46>
     f2a:	12 c1       	rjmp	.+548    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
     f2c:	fa 01       	movw	r30, r20
     f2e:	e6 5c       	subi	r30, 0xC6	; 198
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	19 c3       	rjmp	.+1586   	; 0x1566 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f34:	80 38       	cpi	r24, 0x80	; 128
     f36:	81 f0       	breq	.+32     	; 0xf58 <USB_Device_ProcessControlRequest+0x72>
     f38:	82 38       	cpi	r24, 0x82	; 130
     f3a:	09 f0       	breq	.+2      	; 0xf3e <USB_Device_ProcessControlRequest+0x58>
     f3c:	09 c1       	rjmp	.+530    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f3e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <USB_ControlRequest+0x4>
     f42:	8f 70       	andi	r24, 0x0F	; 15
     f44:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f48:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     f4c:	85 fb       	bst	r24, 5
     f4e:	88 27       	eor	r24, r24
     f50:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f52:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     f58:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     f5c:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <USB_Device_RemoteWakeupEnabled>
     f60:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     f62:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f64:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f68:	97 7f       	andi	r25, 0xF7	; 247
     f6a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     f6e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     f72:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     f76:	c4 c0       	rjmp	.+392    	; 0x1100 <USB_Device_ProcessControlRequest+0x21a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f78:	28 2f       	mov	r18, r24
     f7a:	2d 7f       	andi	r18, 0xFD	; 253
     f7c:	09 f0       	breq	.+2      	; 0xf80 <USB_Device_ProcessControlRequest+0x9a>
     f7e:	e8 c0       	rjmp	.+464    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     f80:	88 23       	and	r24, r24
     f82:	19 f0       	breq	.+6      	; 0xf8a <USB_Device_ProcessControlRequest+0xa4>
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	61 f0       	breq	.+24     	; 0xfa0 <USB_Device_ProcessControlRequest+0xba>
     f88:	e3 c0       	rjmp	.+454    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     f8a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <USB_ControlRequest+0x2>
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	09 f0       	breq	.+2      	; 0xf94 <USB_Device_ProcessControlRequest+0xae>
     f92:	de c0       	rjmp	.+444    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     f94:	93 30       	cpi	r25, 0x03	; 3
     f96:	09 f0       	breq	.+2      	; 0xf9a <USB_Device_ProcessControlRequest+0xb4>
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <USB_Device_RemoteWakeupEnabled>
     f9e:	2b c0       	rjmp	.+86     	; 0xff6 <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     fa0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <USB_ControlRequest+0x2>
     fa4:	81 11       	cpse	r24, r1
     fa6:	27 c0       	rjmp	.+78     	; 0xff6 <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     fa8:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <USB_ControlRequest+0x4>
     fac:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     fae:	09 f4       	brne	.+2      	; 0xfb2 <USB_Device_ProcessControlRequest+0xcc>
     fb0:	cf c0       	rjmp	.+414    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fb2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     fb6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     fba:	20 ff       	sbrs	r18, 0
     fbc:	1c c0       	rjmp	.+56     	; 0xff6 <USB_Device_ProcessControlRequest+0x110>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     fbe:	93 30       	cpi	r25, 0x03	; 3
     fc0:	21 f4       	brne	.+8      	; 0xfca <USB_Device_ProcessControlRequest+0xe4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     fc2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     fc6:	80 62       	ori	r24, 0x20	; 32
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     fca:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     fce:	90 61       	ori	r25, 0x10	; 16
     fd0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     fd4:	21 e0       	ldi	r18, 0x01	; 1
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	a9 01       	movw	r20, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <USB_Device_ProcessControlRequest+0xfa>
     fdc:	44 0f       	add	r20, r20
     fde:	55 1f       	adc	r21, r21
     fe0:	8a 95       	dec	r24
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <USB_Device_ProcessControlRequest+0xf6>
     fe4:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
     fe8:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     fec:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     ff0:	88 60       	ori	r24, 0x08	; 8
     ff2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ff6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ffa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ffe:	87 7f       	andi	r24, 0xF7	; 247
    1000:	82 c0       	rjmp	.+260    	; 0x1106 <USB_Device_ProcessControlRequest+0x220>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1002:	81 11       	cpse	r24, r1
    1004:	a5 c0       	rjmp	.+330    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1006:	10 91 ab 01 	lds	r17, 0x01AB	; 0x8001ab <USB_ControlRequest+0x2>
    100a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    100c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    1010:	80 78       	andi	r24, 0x80	; 128
    1012:	81 2b       	or	r24, r17
    1014:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    1018:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    101c:	87 7f       	andi	r24, 0xF7	; 247
    101e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1022:	df dd       	rcall	.-1090   	; 0xbe2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1024:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
    1028:	80 ff       	sbrs	r24, 0
    102a:	fc cf       	rjmp	.-8      	; 0x1024 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    102c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
    1030:	80 68       	ori	r24, 0x80	; 128
    1032:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1036:	11 11       	cpse	r17, r1
    1038:	02 c0       	rjmp	.+4      	; 0x103e <USB_Device_ProcessControlRequest+0x158>
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	01 c0       	rjmp	.+2      	; 0x1040 <USB_Device_ProcessControlRequest+0x15a>
    103e:	83 e0       	ldi	r24, 0x03	; 3
    1040:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <USB_DeviceState>
    1044:	85 c0       	rjmp	.+266    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1046:	80 58       	subi	r24, 0x80	; 128
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	08 f0       	brcs	.+2      	; 0x104e <USB_Device_ProcessControlRequest+0x168>
    104c:	81 c0       	rjmp	.+258    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    104e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <USB_ControlRequest+0x2>
    1052:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <USB_ControlRequest+0x3>
    1056:	8c 3d       	cpi	r24, 0xDC	; 220
    1058:	53 e0       	ldi	r21, 0x03	; 3
    105a:	95 07       	cpc	r25, r21
    105c:	71 f5       	brne	.+92     	; 0x10ba <USB_Device_ProcessControlRequest+0x1d4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1062:	8a e2       	ldi	r24, 0x2A	; 42
    1064:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1066:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1068:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    106a:	de 01       	movw	r26, r28
    106c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    106e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1070:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1072:	51 e2       	ldi	r21, 0x21	; 33
    1074:	e3 2f       	mov	r30, r19
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
    107c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    107e:	20 ff       	sbrs	r18, 0
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    1082:	e2 95       	swap	r30
    1084:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1086:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1088:	ef 70       	andi	r30, 0x0F	; 15
    108a:	8e 2f       	mov	r24, r30
    108c:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    108e:	ea 30       	cpi	r30, 0x0A	; 10
    1090:	10 f0       	brcs	.+4      	; 0x1096 <USB_Device_ProcessControlRequest+0x1b0>
    1092:	c7 96       	adiw	r24, 0x37	; 55
    1094:	01 c0       	rjmp	.+2      	; 0x1098 <USB_Device_ProcessControlRequest+0x1b2>
    1096:	c0 96       	adiw	r24, 0x30	; 48
    1098:	8d 93       	st	X+, r24
    109a:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    109c:	2f 5f       	subi	r18, 0xFF	; 255
    109e:	24 31       	cpi	r18, 0x14	; 20
    10a0:	49 f7       	brne	.-46     	; 0x1074 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    10a2:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10a8:	87 7f       	andi	r24, 0xF7	; 247
    10aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    10ae:	6a e2       	ldi	r22, 0x2A	; 42
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	ce 01       	movw	r24, r28
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	74 dc       	rcall	.-1816   	; 0x9a0 <Endpoint_Write_Control_Stream_LE>
    10b8:	12 c0       	rjmp	.+36     	; 0x10de <USB_Device_ProcessControlRequest+0x1f8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    10ba:	ae 01       	movw	r20, r28
    10bc:	4f 5f       	subi	r20, 0xFF	; 255
    10be:	5f 4f       	sbci	r21, 0xFF	; 255
    10c0:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <USB_ControlRequest+0x4>
    10c4:	3d dc       	rcall	.-1926   	; 0x940 <CALLBACK_USB_GetDescriptor>
    10c6:	bc 01       	movw	r22, r24
    10c8:	89 2b       	or	r24, r25
    10ca:	09 f4       	brne	.+2      	; 0x10ce <USB_Device_ProcessControlRequest+0x1e8>
    10cc:	41 c0       	rjmp	.+130    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
    10ce:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10d2:	97 7f       	andi	r25, 0xF7	; 247
    10d4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	b8 dc       	rcall	.-1680   	; 0xa4e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10e2:	8b 77       	andi	r24, 0x7B	; 123
    10e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10e8:	33 c0       	rjmp	.+102    	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    10ea:	80 38       	cpi	r24, 0x80	; 128
    10ec:	89 f5       	brne	.+98     	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    10f2:	87 7f       	andi	r24, 0xF7	; 247
    10f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    10f8:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10fc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1100:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1104:	8e 77       	andi	r24, 0x7E	; 126
    1106:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    110a:	6b dd       	rcall	.-1322   	; 0xbe2 <Endpoint_ClearStatusStage>
    110c:	21 c0       	rjmp	.+66     	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    110e:	81 11       	cpse	r24, r1
    1110:	1f c0       	rjmp	.+62     	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1112:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <USB_ControlRequest+0x2>
    1116:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <USB_ControlRequest+0x3>
    111a:	99 27       	eor	r25, r25
    111c:	02 97       	sbiw	r24, 0x02	; 2
    111e:	c4 f4       	brge	.+48     	; 0x1150 <USB_Device_ProcessControlRequest+0x26a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1120:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1124:	87 7f       	andi	r24, 0xF7	; 247
    1126:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    112a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <USB_ControlRequest+0x2>
    112e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1132:	57 dd       	rcall	.-1362   	; 0xbe2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1134:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_Device_ConfigurationNumber>
    1138:	81 11       	cpse	r24, r1
    113a:	06 c0       	rjmp	.+12     	; 0x1148 <USB_Device_ProcessControlRequest+0x262>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    113c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1140:	87 fd       	sbrc	r24, 7
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <USB_Device_ProcessControlRequest+0x262>
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	01 c0       	rjmp	.+2      	; 0x114a <USB_Device_ProcessControlRequest+0x264>
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    114e:	f2 db       	rcall	.-2076   	; 0x934 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1150:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1154:	83 ff       	sbrs	r24, 3
    1156:	0a c0       	rjmp	.+20     	; 0x116c <USB_Device_ProcessControlRequest+0x286>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1158:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    115c:	87 7f       	andi	r24, 0xF7	; 247
    115e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1162:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
    1166:	80 62       	ori	r24, 0x20	; 32
    1168:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    116c:	aa 96       	adiw	r28, 0x2a	; 42
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	08 95       	ret

00001180 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1180:	08 95       	ret

00001182 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1182:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1184:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_DeviceState>
    1188:	88 23       	and	r24, r24
    118a:	99 f0       	breq	.+38     	; 0x11b2 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    118c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    1190:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1192:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
    1196:	89 2f       	mov	r24, r25
    1198:	81 70       	andi	r24, 0x01	; 1
    119a:	90 fd       	sbrc	r25, 0
    119c:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    119e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11a0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    11a8:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    11aa:	9d de       	rcall	.-710    	; 0xee6 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11ac:	cf 70       	andi	r28, 0x0F	; 15
    11ae:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24
    11bc:	fc 01       	movw	r30, r24
    11be:	70 96       	adiw	r30, 0x10	; 16
    11c0:	8b e0       	ldi	r24, 0x0B	; 11
    11c2:	df 01       	movw	r26, r30
    11c4:	1d 92       	st	X+, r1
    11c6:	8a 95       	dec	r24
    11c8:	e9 f7       	brne	.-6      	; 0x11c4 <CDC_Device_ConfigureEndpoints+0xe>
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	8c 83       	std	Y+4, r24	; 0x04
    11ce:	89 87       	std	Y+9, r24	; 0x09
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	8e 87       	std	Y+14, r24	; 0x0e
    11d4:	61 e0       	ldi	r22, 0x01	; 1
    11d6:	ce 01       	movw	r24, r28
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	c6 dc       	rcall	.-1652   	; 0xb68 <Endpoint_ConfigureEndpointTable>
    11dc:	88 23       	and	r24, r24
    11de:	61 f0       	breq	.+24     	; 0x11f8 <CDC_Device_ConfigureEndpoints+0x42>
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	ce 01       	movw	r24, r28
    11e4:	06 96       	adiw	r24, 0x06	; 6
    11e6:	c0 dc       	rcall	.-1664   	; 0xb68 <Endpoint_ConfigureEndpointTable>
    11e8:	88 23       	and	r24, r24
    11ea:	31 f0       	breq	.+12     	; 0x11f8 <CDC_Device_ConfigureEndpoints+0x42>
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	ce 01       	movw	r24, r28
    11f0:	0b 96       	adiw	r24, 0x0b	; 11
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	b8 cc       	rjmp	.-1680   	; 0xb68 <Endpoint_ConfigureEndpointTable>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <CDC_Device_SendByte>:
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <USB_DeviceState>
    120a:	24 30       	cpi	r18, 0x04	; 4
    120c:	f9 f4       	brne	.+62     	; 0x124c <CDC_Device_SendByte+0x4c>
    120e:	fc 01       	movw	r30, r24
    1210:	04 89       	ldd	r16, Z+20	; 0x14
    1212:	15 89       	ldd	r17, Z+21	; 0x15
    1214:	26 89       	ldd	r18, Z+22	; 0x16
    1216:	37 89       	ldd	r19, Z+23	; 0x17
    1218:	01 2b       	or	r16, r17
    121a:	02 2b       	or	r16, r18
    121c:	03 2b       	or	r16, r19
    121e:	b1 f0       	breq	.+44     	; 0x124c <CDC_Device_SendByte+0x4c>
    1220:	c6 2f       	mov	r28, r22
    1222:	81 81       	ldd	r24, Z+1	; 0x01
    1224:	8f 70       	andi	r24, 0x0F	; 15
    1226:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    122a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    122e:	85 ff       	sbrs	r24, 5
    1230:	04 c0       	rjmp	.+8      	; 0x123a <CDC_Device_SendByte+0x3a>
    1232:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	0a c0       	rjmp	.+20     	; 0x124e <CDC_Device_SendByte+0x4e>
    123a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    123e:	8e 77       	andi	r24, 0x7E	; 126
    1240:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1244:	ed dc       	rcall	.-1574   	; 0xc20 <Endpoint_WaitUntilReady>
    1246:	88 23       	and	r24, r24
    1248:	a1 f3       	breq	.-24     	; 0x1232 <CDC_Device_SendByte+0x32>
    124a:	01 c0       	rjmp	.+2      	; 0x124e <CDC_Device_SendByte+0x4e>
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	08 95       	ret

00001256 <CDC_Device_putchar>:
    1256:	fb 01       	movw	r30, r22
    1258:	68 2f       	mov	r22, r24
    125a:	84 85       	ldd	r24, Z+12	; 0x0c
    125c:	95 85       	ldd	r25, Z+13	; 0x0d
    125e:	d0 df       	rcall	.-96     	; 0x1200 <CDC_Device_SendByte>
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 11       	cpse	r24, r1
    1266:	02 c0       	rjmp	.+4      	; 0x126c <CDC_Device_putchar+0x16>
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	88 27       	eor	r24, r24
    126e:	99 27       	eor	r25, r25
    1270:	82 1b       	sub	r24, r18
    1272:	93 0b       	sbc	r25, r19
    1274:	08 95       	ret

00001276 <CDC_Device_Flush>:
    1276:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <USB_DeviceState>
    127a:	24 30       	cpi	r18, 0x04	; 4
    127c:	21 f5       	brne	.+72     	; 0x12c6 <CDC_Device_Flush+0x50>
    127e:	fc 01       	movw	r30, r24
    1280:	44 89       	ldd	r20, Z+20	; 0x14
    1282:	55 89       	ldd	r21, Z+21	; 0x15
    1284:	66 89       	ldd	r22, Z+22	; 0x16
    1286:	77 89       	ldd	r23, Z+23	; 0x17
    1288:	45 2b       	or	r20, r21
    128a:	46 2b       	or	r20, r22
    128c:	47 2b       	or	r20, r23
    128e:	d9 f0       	breq	.+54     	; 0x12c6 <CDC_Device_Flush+0x50>
    1290:	81 81       	ldd	r24, Z+1	; 0x01
    1292:	8f 70       	andi	r24, 0x0F	; 15
    1294:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    1298:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
    129c:	88 23       	and	r24, r24
    129e:	89 f0       	breq	.+34     	; 0x12c2 <CDC_Device_Flush+0x4c>
    12a0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12a8:	8e 77       	andi	r24, 0x7E	; 126
    12aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12ae:	95 fd       	sbrc	r25, 5
    12b0:	08 c0       	rjmp	.+16     	; 0x12c2 <CDC_Device_Flush+0x4c>
    12b2:	b6 dc       	rcall	.-1684   	; 0xc20 <Endpoint_WaitUntilReady>
    12b4:	81 11       	cpse	r24, r1
    12b6:	08 c0       	rjmp	.+16     	; 0x12c8 <CDC_Device_Flush+0x52>
    12b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12bc:	8e 77       	andi	r24, 0x7E	; 126
    12be:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	08 95       	ret
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	08 95       	ret

000012ca <CDC_Device_USBTask>:
    12ca:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <USB_DeviceState>
    12ce:	24 30       	cpi	r18, 0x04	; 4
    12d0:	89 f4       	brne	.+34     	; 0x12f4 <CDC_Device_USBTask+0x2a>
    12d2:	fc 01       	movw	r30, r24
    12d4:	44 89       	ldd	r20, Z+20	; 0x14
    12d6:	55 89       	ldd	r21, Z+21	; 0x15
    12d8:	66 89       	ldd	r22, Z+22	; 0x16
    12da:	77 89       	ldd	r23, Z+23	; 0x17
    12dc:	45 2b       	or	r20, r21
    12de:	46 2b       	or	r20, r22
    12e0:	47 2b       	or	r20, r23
    12e2:	41 f0       	breq	.+16     	; 0x12f4 <CDC_Device_USBTask+0x2a>
    12e4:	21 81       	ldd	r18, Z+1	; 0x01
    12e6:	2f 70       	andi	r18, 0x0F	; 15
    12e8:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    12ec:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    12f0:	20 fd       	sbrc	r18, 0
    12f2:	c1 cf       	rjmp	.-126    	; 0x1276 <CDC_Device_Flush>
    12f4:	08 95       	ret

000012f6 <CDC_Device_ReceiveByte>:
    12f6:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <USB_DeviceState>
    12fa:	24 30       	cpi	r18, 0x04	; 4
    12fc:	19 f0       	breq	.+6      	; 0x1304 <CDC_Device_ReceiveByte+0xe>
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	9f ef       	ldi	r25, 0xFF	; 255
    1302:	08 95       	ret
    1304:	fc 01       	movw	r30, r24
    1306:	44 89       	ldd	r20, Z+20	; 0x14
    1308:	55 89       	ldd	r21, Z+21	; 0x15
    130a:	66 89       	ldd	r22, Z+22	; 0x16
    130c:	77 89       	ldd	r23, Z+23	; 0x17
    130e:	45 2b       	or	r20, r21
    1310:	46 2b       	or	r20, r22
    1312:	47 2b       	or	r20, r23
    1314:	a1 f3       	breq	.-24     	; 0x12fe <CDC_Device_ReceiveByte+0x8>
    1316:	86 81       	ldd	r24, Z+6	; 0x06
    1318:	8f 70       	andi	r24, 0x0F	; 15
    131a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
    131e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1322:	82 ff       	sbrs	r24, 2
    1324:	ec cf       	rjmp	.-40     	; 0x12fe <CDC_Device_ReceiveByte+0x8>
    1326:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
    132a:	88 23       	and	r24, r24
    132c:	21 f0       	breq	.+8      	; 0x1336 <CDC_Device_ReceiveByte+0x40>
    132e:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <CDC_Device_ReceiveByte+0x44>
    1336:	2f ef       	ldi	r18, 0xFF	; 255
    1338:	3f ef       	ldi	r19, 0xFF	; 255
    133a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
    133e:	81 11       	cpse	r24, r1
    1340:	05 c0       	rjmp	.+10     	; 0x134c <CDC_Device_ReceiveByte+0x56>
    1342:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1346:	8b 77       	andi	r24, 0x7B	; 123
    1348:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    134c:	c9 01       	movw	r24, r18
    134e:	08 95       	ret

00001350 <CDC_Device_getchar>:
    1350:	fc 01       	movw	r30, r24
    1352:	84 85       	ldd	r24, Z+12	; 0x0c
    1354:	95 85       	ldd	r25, Z+13	; 0x0d
    1356:	cf df       	rcall	.-98     	; 0x12f6 <CDC_Device_ReceiveByte>
    1358:	97 ff       	sbrs	r25, 7
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <CDC_Device_getchar+0x10>
    135c:	8e ef       	ldi	r24, 0xFE	; 254
    135e:	9f ef       	ldi	r25, 0xFF	; 255
    1360:	08 95       	ret

00001362 <CDC_Device_CreateStream>:
    1362:	fb 01       	movw	r30, r22
    1364:	2e e0       	ldi	r18, 0x0E	; 14
    1366:	db 01       	movw	r26, r22
    1368:	1d 92       	st	X+, r1
    136a:	2a 95       	dec	r18
    136c:	e9 f7       	brne	.-6      	; 0x1368 <CDC_Device_CreateStream+0x6>
    136e:	23 e0       	ldi	r18, 0x03	; 3
    1370:	23 83       	std	Z+3, r18	; 0x03
    1372:	2b e2       	ldi	r18, 0x2B	; 43
    1374:	39 e0       	ldi	r19, 0x09	; 9
    1376:	31 87       	std	Z+9, r19	; 0x09
    1378:	20 87       	std	Z+8, r18	; 0x08
    137a:	28 ea       	ldi	r18, 0xA8	; 168
    137c:	39 e0       	ldi	r19, 0x09	; 9
    137e:	33 87       	std	Z+11, r19	; 0x0b
    1380:	22 87       	std	Z+10, r18	; 0x0a
    1382:	95 87       	std	Z+13, r25	; 0x0d
    1384:	84 87       	std	Z+12, r24	; 0x0c
    1386:	08 95       	ret

00001388 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    1388:	08 95       	ret

0000138a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1390:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
    1394:	83 ff       	sbrs	r24, 3
    1396:	a6 c0       	rjmp	.+332    	; 0x14e4 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1398:	88 81       	ld	r24, Y
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <USB_ControlRequest+0x4>
    13a0:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <USB_ControlRequest+0x5>
    13a4:	28 17       	cp	r18, r24
    13a6:	39 07       	cpc	r19, r25
    13a8:	09 f0       	breq	.+2      	; 0x13ac <CDC_Device_ProcessControlRequest+0x22>
    13aa:	9c c0       	rjmp	.+312    	; 0x14e4 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
    13ac:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <USB_ControlRequest+0x1>
    13b0:	81 32       	cpi	r24, 0x21	; 33
    13b2:	61 f0       	breq	.+24     	; 0x13cc <CDC_Device_ProcessControlRequest+0x42>
    13b4:	20 f4       	brcc	.+8      	; 0x13be <CDC_Device_ProcessControlRequest+0x34>
    13b6:	80 32       	cpi	r24, 0x20	; 32
    13b8:	09 f4       	brne	.+2      	; 0x13bc <CDC_Device_ProcessControlRequest+0x32>
    13ba:	3e c0       	rjmp	.+124    	; 0x1438 <CDC_Device_ProcessControlRequest+0xae>
    13bc:	93 c0       	rjmp	.+294    	; 0x14e4 <CDC_Device_ProcessControlRequest+0x15a>
    13be:	82 32       	cpi	r24, 0x22	; 34
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <CDC_Device_ProcessControlRequest+0x3a>
    13c2:	6c c0       	rjmp	.+216    	; 0x149c <CDC_Device_ProcessControlRequest+0x112>
    13c4:	83 32       	cpi	r24, 0x23	; 35
    13c6:	09 f4       	brne	.+2      	; 0x13ca <CDC_Device_ProcessControlRequest+0x40>
    13c8:	7d c0       	rjmp	.+250    	; 0x14c4 <CDC_Device_ProcessControlRequest+0x13a>
    13ca:	8c c0       	rjmp	.+280    	; 0x14e4 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    13cc:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <USB_ControlRequest>
    13d0:	81 3a       	cpi	r24, 0xA1	; 161
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <CDC_Device_ProcessControlRequest+0x4c>
    13d4:	87 c0       	rjmp	.+270    	; 0x14e4 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    13da:	87 7f       	andi	r24, 0xF7	; 247
    13dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    13e4:	80 ff       	sbrs	r24, 0
    13e6:	fc cf       	rjmp	.-8      	; 0x13e0 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    13e8:	8c 89       	ldd	r24, Y+20	; 0x14
    13ea:	9d 89       	ldd	r25, Y+21	; 0x15
    13ec:	ae 89       	ldd	r26, Y+22	; 0x16
    13ee:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    13f0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
    13f4:	49 2f       	mov	r20, r25
    13f6:	5a 2f       	mov	r21, r26
    13f8:	6b 2f       	mov	r22, r27
    13fa:	77 27       	eor	r23, r23
    13fc:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 16);
    1400:	ad 01       	movw	r20, r26
    1402:	66 27       	eor	r22, r22
    1404:	77 27       	eor	r23, r23
    1406:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 24);
    140a:	8b 2f       	mov	r24, r27
    140c:	99 27       	eor	r25, r25
    140e:	aa 27       	eor	r26, r26
    1410:	bb 27       	eor	r27, r27
    1412:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1416:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1418:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    141c:	89 8d       	ldd	r24, Y+25	; 0x19
    141e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1422:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1424:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1428:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    142c:	8e 77       	andi	r24, 0x7E	; 126
    142e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1436:	d5 cb       	rjmp	.-2134   	; 0xbe2 <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1438:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <USB_ControlRequest>
    143c:	81 32       	cpi	r24, 0x21	; 33
    143e:	09 f0       	breq	.+2      	; 0x1442 <CDC_Device_ProcessControlRequest+0xb8>
    1440:	51 c0       	rjmp	.+162    	; 0x14e4 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1442:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    1446:	87 7f       	andi	r24, 0xF7	; 247
    1448:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    144c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1450:	82 fd       	sbrc	r24, 2
    1452:	05 c0       	rjmp	.+10     	; 0x145e <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1454:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_DeviceState>
    1458:	81 11       	cpse	r24, r1
    145a:	f8 cf       	rjmp	.-16     	; 0x144c <CDC_Device_ProcessControlRequest+0xc2>
    145c:	43 c0       	rjmp	.+134    	; 0x14e4 <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    145e:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[1] = UEDATX;
    1462:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[2] = UEDATX;
    1466:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[3] = UEDATX;
    146a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    146e:	3c 8b       	std	Y+20, r19	; 0x14
    1470:	2d 8b       	std	Y+21, r18	; 0x15
    1472:	9e 8b       	std	Y+22, r25	; 0x16
    1474:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1476:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    147a:	88 8f       	std	Y+24, r24	; 0x18
    147c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1480:	89 8f       	std	Y+25, r24	; 0x19
    1482:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1486:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1488:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    148c:	8b 77       	andi	r24, 0x7B	; 123
    148e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1492:	a7 db       	rcall	.-2226   	; 0xbe2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1494:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1496:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1498:	cf 91       	pop	r28
    149a:	76 cf       	rjmp	.-276    	; 0x1388 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    149c:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <USB_ControlRequest>
    14a0:	81 32       	cpi	r24, 0x21	; 33
    14a2:	01 f5       	brne	.+64     	; 0x14e4 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    14a8:	87 7f       	andi	r24, 0xF7	; 247
    14aa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    14ae:	99 db       	rcall	.-2254   	; 0xbe2 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    14b0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <USB_ControlRequest+0x2>
    14b4:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <USB_ControlRequest+0x3>
    14b8:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    14ba:	88 8b       	std	Y+16, r24	; 0x10
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    14bc:	ce 01       	movw	r24, r28
    14be:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    14c0:	cf 91       	pop	r28
    14c2:	62 cf       	rjmp	.-316    	; 0x1388 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    14c4:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <USB_ControlRequest>
    14c8:	81 32       	cpi	r24, 0x21	; 33
    14ca:	61 f4       	brne	.+24     	; 0x14e4 <CDC_Device_ProcessControlRequest+0x15a>
    14cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
    14d0:	87 7f       	andi	r24, 0xF7	; 247
    14d2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    14d6:	85 db       	rcall	.-2294   	; 0xbe2 <Endpoint_ClearStatusStage>
    14d8:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <USB_ControlRequest+0x2>
			}

			break;
	}
}
    14dc:	ce 01       	movw	r24, r28
    14de:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    14e0:	cf 91       	pop	r28
    14e2:	52 cf       	rjmp	.-348    	; 0x1388 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <__mulhi3>:
    14ea:	00 24       	eor	r0, r0
    14ec:	55 27       	eor	r21, r21
    14ee:	04 c0       	rjmp	.+8      	; 0x14f8 <__mulhi3+0xe>
    14f0:	08 0e       	add	r0, r24
    14f2:	59 1f       	adc	r21, r25
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	29 f0       	breq	.+10     	; 0x1506 <__mulhi3+0x1c>
    14fc:	76 95       	lsr	r23
    14fe:	67 95       	ror	r22
    1500:	b8 f3       	brcs	.-18     	; 0x14f0 <__mulhi3+0x6>
    1502:	71 05       	cpc	r23, r1
    1504:	b9 f7       	brne	.-18     	; 0x14f4 <__mulhi3+0xa>
    1506:	80 2d       	mov	r24, r0
    1508:	95 2f       	mov	r25, r21
    150a:	08 95       	ret

0000150c <__mulsi3>:
    150c:	ee 27       	eor	r30, r30
    150e:	ff 27       	eor	r31, r31

00001510 <__mulsi3_helper>:
    1510:	aa 27       	eor	r26, r26
    1512:	bb 27       	eor	r27, r27
    1514:	08 c0       	rjmp	.+16     	; 0x1526 <__mulsi3_helper+0x16>
    1516:	a2 0f       	add	r26, r18
    1518:	b3 1f       	adc	r27, r19
    151a:	e4 1f       	adc	r30, r20
    151c:	f5 1f       	adc	r31, r21
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	44 1f       	adc	r20, r20
    1524:	55 1f       	adc	r21, r21
    1526:	96 95       	lsr	r25
    1528:	87 95       	ror	r24
    152a:	77 95       	ror	r23
    152c:	67 95       	ror	r22
    152e:	98 f3       	brcs	.-26     	; 0x1516 <__mulsi3_helper+0x6>
    1530:	70 40       	sbci	r23, 0x00	; 0
    1532:	a9 f7       	brne	.-22     	; 0x151e <__mulsi3_helper+0xe>
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	99 f7       	brne	.-26     	; 0x151e <__mulsi3_helper+0xe>
    1538:	bd 01       	movw	r22, r26
    153a:	cf 01       	movw	r24, r30
    153c:	08 95       	ret

0000153e <__udivmodhi4>:
    153e:	aa 1b       	sub	r26, r26
    1540:	bb 1b       	sub	r27, r27
    1542:	51 e1       	ldi	r21, 0x11	; 17
    1544:	07 c0       	rjmp	.+14     	; 0x1554 <__udivmodhi4_ep>

00001546 <__udivmodhi4_loop>:
    1546:	aa 1f       	adc	r26, r26
    1548:	bb 1f       	adc	r27, r27
    154a:	a6 17       	cp	r26, r22
    154c:	b7 07       	cpc	r27, r23
    154e:	10 f0       	brcs	.+4      	; 0x1554 <__udivmodhi4_ep>
    1550:	a6 1b       	sub	r26, r22
    1552:	b7 0b       	sbc	r27, r23

00001554 <__udivmodhi4_ep>:
    1554:	88 1f       	adc	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	5a 95       	dec	r21
    155a:	a9 f7       	brne	.-22     	; 0x1546 <__udivmodhi4_loop>
    155c:	80 95       	com	r24
    155e:	90 95       	com	r25
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	08 95       	ret

00001566 <__tablejump2__>:
    1566:	ee 0f       	add	r30, r30
    1568:	ff 1f       	adc	r31, r31
    156a:	05 90       	lpm	r0, Z+
    156c:	f4 91       	lpm	r31, Z
    156e:	e0 2d       	mov	r30, r0
    1570:	09 94       	ijmp

00001572 <fgetc>:
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	ec 01       	movw	r28, r24
    1578:	2b 81       	ldd	r18, Y+3	; 0x03
    157a:	20 ff       	sbrs	r18, 0
    157c:	33 c0       	rjmp	.+102    	; 0x15e4 <fgetc+0x72>
    157e:	26 ff       	sbrs	r18, 6
    1580:	0a c0       	rjmp	.+20     	; 0x1596 <fgetc+0x24>
    1582:	2f 7b       	andi	r18, 0xBF	; 191
    1584:	2b 83       	std	Y+3, r18	; 0x03
    1586:	8e 81       	ldd	r24, Y+6	; 0x06
    1588:	9f 81       	ldd	r25, Y+7	; 0x07
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	9f 83       	std	Y+7, r25	; 0x07
    158e:	8e 83       	std	Y+6, r24	; 0x06
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	29 c0       	rjmp	.+82     	; 0x15e8 <fgetc+0x76>
    1596:	22 ff       	sbrs	r18, 2
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <fgetc+0x46>
    159a:	e8 81       	ld	r30, Y
    159c:	f9 81       	ldd	r31, Y+1	; 0x01
    159e:	80 81       	ld	r24, Z
    15a0:	08 2e       	mov	r0, r24
    15a2:	00 0c       	add	r0, r0
    15a4:	99 0b       	sbc	r25, r25
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	19 f4       	brne	.+6      	; 0x15b0 <fgetc+0x3e>
    15aa:	20 62       	ori	r18, 0x20	; 32
    15ac:	2b 83       	std	Y+3, r18	; 0x03
    15ae:	1a c0       	rjmp	.+52     	; 0x15e4 <fgetc+0x72>
    15b0:	31 96       	adiw	r30, 0x01	; 1
    15b2:	f9 83       	std	Y+1, r31	; 0x01
    15b4:	e8 83       	st	Y, r30
    15b6:	0e c0       	rjmp	.+28     	; 0x15d4 <fgetc+0x62>
    15b8:	ea 85       	ldd	r30, Y+10	; 0x0a
    15ba:	fb 85       	ldd	r31, Y+11	; 0x0b
    15bc:	09 95       	icall
    15be:	97 ff       	sbrs	r25, 7
    15c0:	09 c0       	rjmp	.+18     	; 0x15d4 <fgetc+0x62>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	11 f0       	breq	.+4      	; 0x15cc <fgetc+0x5a>
    15c8:	80 e2       	ldi	r24, 0x20	; 32
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <fgetc+0x5c>
    15cc:	80 e1       	ldi	r24, 0x10	; 16
    15ce:	82 2b       	or	r24, r18
    15d0:	8b 83       	std	Y+3, r24	; 0x03
    15d2:	08 c0       	rjmp	.+16     	; 0x15e4 <fgetc+0x72>
    15d4:	2e 81       	ldd	r18, Y+6	; 0x06
    15d6:	3f 81       	ldd	r19, Y+7	; 0x07
    15d8:	2f 5f       	subi	r18, 0xFF	; 255
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
    15dc:	3f 83       	std	Y+7, r19	; 0x07
    15de:	2e 83       	std	Y+6, r18	; 0x06
    15e0:	99 27       	eor	r25, r25
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <fgetc+0x76>
    15e4:	8f ef       	ldi	r24, 0xFF	; 255
    15e6:	9f ef       	ldi	r25, 0xFF	; 255
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <fprintf>:
    15ee:	a0 e0       	ldi	r26, 0x00	; 0
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ec ef       	ldi	r30, 0xFC	; 252
    15f4:	fa e0       	ldi	r31, 0x0A	; 10
    15f6:	d9 c2       	rjmp	.+1458   	; 0x1baa <__prologue_saves__+0x20>
    15f8:	ae 01       	movw	r20, r28
    15fa:	47 5f       	subi	r20, 0xF7	; 247
    15fc:	5f 4f       	sbci	r21, 0xFF	; 255
    15fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1600:	78 85       	ldd	r23, Y+8	; 0x08
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	3e d0       	rcall	.+124    	; 0x1684 <vfprintf>
    1608:	e2 e0       	ldi	r30, 0x02	; 2
    160a:	eb c2       	rjmp	.+1494   	; 0x1be2 <__epilogue_restores__+0x20>

0000160c <fputc>:
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	fb 01       	movw	r30, r22
    1616:	23 81       	ldd	r18, Z+3	; 0x03
    1618:	21 fd       	sbrc	r18, 1
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <fputc+0x16>
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	9f ef       	ldi	r25, 0xFF	; 255
    1620:	2c c0       	rjmp	.+88     	; 0x167a <fputc+0x6e>
    1622:	22 ff       	sbrs	r18, 2
    1624:	16 c0       	rjmp	.+44     	; 0x1652 <fputc+0x46>
    1626:	46 81       	ldd	r20, Z+6	; 0x06
    1628:	57 81       	ldd	r21, Z+7	; 0x07
    162a:	24 81       	ldd	r18, Z+4	; 0x04
    162c:	35 81       	ldd	r19, Z+5	; 0x05
    162e:	42 17       	cp	r20, r18
    1630:	53 07       	cpc	r21, r19
    1632:	44 f4       	brge	.+16     	; 0x1644 <fputc+0x38>
    1634:	a0 81       	ld	r26, Z
    1636:	b1 81       	ldd	r27, Z+1	; 0x01
    1638:	9d 01       	movw	r18, r26
    163a:	2f 5f       	subi	r18, 0xFF	; 255
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	31 83       	std	Z+1, r19	; 0x01
    1640:	20 83       	st	Z, r18
    1642:	8c 93       	st	X, r24
    1644:	26 81       	ldd	r18, Z+6	; 0x06
    1646:	37 81       	ldd	r19, Z+7	; 0x07
    1648:	2f 5f       	subi	r18, 0xFF	; 255
    164a:	3f 4f       	sbci	r19, 0xFF	; 255
    164c:	37 83       	std	Z+7, r19	; 0x07
    164e:	26 83       	std	Z+6, r18	; 0x06
    1650:	14 c0       	rjmp	.+40     	; 0x167a <fputc+0x6e>
    1652:	8b 01       	movw	r16, r22
    1654:	ec 01       	movw	r28, r24
    1656:	fb 01       	movw	r30, r22
    1658:	00 84       	ldd	r0, Z+8	; 0x08
    165a:	f1 85       	ldd	r31, Z+9	; 0x09
    165c:	e0 2d       	mov	r30, r0
    165e:	09 95       	icall
    1660:	89 2b       	or	r24, r25
    1662:	e1 f6       	brne	.-72     	; 0x161c <fputc+0x10>
    1664:	d8 01       	movw	r26, r16
    1666:	16 96       	adiw	r26, 0x06	; 6
    1668:	8d 91       	ld	r24, X+
    166a:	9c 91       	ld	r25, X
    166c:	17 97       	sbiw	r26, 0x07	; 7
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	17 96       	adiw	r26, 0x07	; 7
    1672:	9c 93       	st	X, r25
    1674:	8e 93       	st	-X, r24
    1676:	16 97       	sbiw	r26, 0x06	; 6
    1678:	ce 01       	movw	r24, r28
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	08 95       	ret

00001684 <vfprintf>:
    1684:	ab e0       	ldi	r26, 0x0B	; 11
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e7 e4       	ldi	r30, 0x47	; 71
    168a:	fb e0       	ldi	r31, 0x0B	; 11
    168c:	7e c2       	rjmp	.+1276   	; 0x1b8a <__prologue_saves__>
    168e:	6c 01       	movw	r12, r24
    1690:	7b 01       	movw	r14, r22
    1692:	8a 01       	movw	r16, r20
    1694:	fc 01       	movw	r30, r24
    1696:	17 82       	std	Z+7, r1	; 0x07
    1698:	16 82       	std	Z+6, r1	; 0x06
    169a:	83 81       	ldd	r24, Z+3	; 0x03
    169c:	81 ff       	sbrs	r24, 1
    169e:	c0 c1       	rjmp	.+896    	; 0x1a20 <vfprintf+0x39c>
    16a0:	ce 01       	movw	r24, r28
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	3c 01       	movw	r6, r24
    16a6:	f6 01       	movw	r30, r12
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	f7 01       	movw	r30, r14
    16ac:	93 fd       	sbrc	r25, 3
    16ae:	85 91       	lpm	r24, Z+
    16b0:	93 ff       	sbrs	r25, 3
    16b2:	81 91       	ld	r24, Z+
    16b4:	7f 01       	movw	r14, r30
    16b6:	88 23       	and	r24, r24
    16b8:	09 f4       	brne	.+2      	; 0x16bc <vfprintf+0x38>
    16ba:	ae c1       	rjmp	.+860    	; 0x1a18 <vfprintf+0x394>
    16bc:	85 32       	cpi	r24, 0x25	; 37
    16be:	39 f4       	brne	.+14     	; 0x16ce <vfprintf+0x4a>
    16c0:	93 fd       	sbrc	r25, 3
    16c2:	85 91       	lpm	r24, Z+
    16c4:	93 ff       	sbrs	r25, 3
    16c6:	81 91       	ld	r24, Z+
    16c8:	7f 01       	movw	r14, r30
    16ca:	85 32       	cpi	r24, 0x25	; 37
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <vfprintf+0x52>
    16ce:	b6 01       	movw	r22, r12
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9c df       	rcall	.-200    	; 0x160c <fputc>
    16d4:	e8 cf       	rjmp	.-48     	; 0x16a6 <vfprintf+0x22>
    16d6:	91 2c       	mov	r9, r1
    16d8:	21 2c       	mov	r2, r1
    16da:	31 2c       	mov	r3, r1
    16dc:	ff e1       	ldi	r31, 0x1F	; 31
    16de:	f3 15       	cp	r31, r3
    16e0:	e0 f0       	brcs	.+56     	; 0x171a <vfprintf+0x96>
    16e2:	8b 32       	cpi	r24, 0x2B	; 43
    16e4:	79 f0       	breq	.+30     	; 0x1704 <vfprintf+0x80>
    16e6:	38 f4       	brcc	.+14     	; 0x16f6 <vfprintf+0x72>
    16e8:	80 32       	cpi	r24, 0x20	; 32
    16ea:	79 f0       	breq	.+30     	; 0x170a <vfprintf+0x86>
    16ec:	83 32       	cpi	r24, 0x23	; 35
    16ee:	a9 f4       	brne	.+42     	; 0x171a <vfprintf+0x96>
    16f0:	23 2d       	mov	r18, r3
    16f2:	20 61       	ori	r18, 0x10	; 16
    16f4:	10 c0       	rjmp	.+32     	; 0x1716 <vfprintf+0x92>
    16f6:	8d 32       	cpi	r24, 0x2D	; 45
    16f8:	59 f0       	breq	.+22     	; 0x1710 <vfprintf+0x8c>
    16fa:	80 33       	cpi	r24, 0x30	; 48
    16fc:	71 f4       	brne	.+28     	; 0x171a <vfprintf+0x96>
    16fe:	23 2d       	mov	r18, r3
    1700:	21 60       	ori	r18, 0x01	; 1
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <vfprintf+0x92>
    1704:	83 2d       	mov	r24, r3
    1706:	82 60       	ori	r24, 0x02	; 2
    1708:	38 2e       	mov	r3, r24
    170a:	e3 2d       	mov	r30, r3
    170c:	e4 60       	ori	r30, 0x04	; 4
    170e:	22 c0       	rjmp	.+68     	; 0x1754 <vfprintf+0xd0>
    1710:	f3 2d       	mov	r31, r3
    1712:	f8 60       	ori	r31, 0x08	; 8
    1714:	25 c0       	rjmp	.+74     	; 0x1760 <vfprintf+0xdc>
    1716:	32 2e       	mov	r3, r18
    1718:	27 c0       	rjmp	.+78     	; 0x1768 <vfprintf+0xe4>
    171a:	37 fc       	sbrc	r3, 7
    171c:	2d c0       	rjmp	.+90     	; 0x1778 <vfprintf+0xf4>
    171e:	20 ed       	ldi	r18, 0xD0	; 208
    1720:	28 0f       	add	r18, r24
    1722:	2a 30       	cpi	r18, 0x0A	; 10
    1724:	88 f4       	brcc	.+34     	; 0x1748 <vfprintf+0xc4>
    1726:	36 fe       	sbrs	r3, 6
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <vfprintf+0xb2>
    172a:	89 2d       	mov	r24, r9
    172c:	6a e0       	ldi	r22, 0x0A	; 10
    172e:	24 d2       	rcall	.+1096   	; 0x1b78 <__mulqi3>
    1730:	92 2e       	mov	r9, r18
    1732:	98 0e       	add	r9, r24
    1734:	19 c0       	rjmp	.+50     	; 0x1768 <vfprintf+0xe4>
    1736:	82 2d       	mov	r24, r2
    1738:	6a e0       	ldi	r22, 0x0A	; 10
    173a:	1e d2       	rcall	.+1084   	; 0x1b78 <__mulqi3>
    173c:	22 2e       	mov	r2, r18
    173e:	28 0e       	add	r2, r24
    1740:	83 2d       	mov	r24, r3
    1742:	80 62       	ori	r24, 0x20	; 32
    1744:	38 2e       	mov	r3, r24
    1746:	10 c0       	rjmp	.+32     	; 0x1768 <vfprintf+0xe4>
    1748:	8e 32       	cpi	r24, 0x2E	; 46
    174a:	31 f4       	brne	.+12     	; 0x1758 <vfprintf+0xd4>
    174c:	36 fc       	sbrc	r3, 6
    174e:	64 c1       	rjmp	.+712    	; 0x1a18 <vfprintf+0x394>
    1750:	e3 2d       	mov	r30, r3
    1752:	e0 64       	ori	r30, 0x40	; 64
    1754:	3e 2e       	mov	r3, r30
    1756:	08 c0       	rjmp	.+16     	; 0x1768 <vfprintf+0xe4>
    1758:	8c 36       	cpi	r24, 0x6C	; 108
    175a:	21 f4       	brne	.+8      	; 0x1764 <vfprintf+0xe0>
    175c:	f3 2d       	mov	r31, r3
    175e:	f0 68       	ori	r31, 0x80	; 128
    1760:	3f 2e       	mov	r3, r31
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0xe4>
    1764:	88 36       	cpi	r24, 0x68	; 104
    1766:	41 f4       	brne	.+16     	; 0x1778 <vfprintf+0xf4>
    1768:	f7 01       	movw	r30, r14
    176a:	93 fd       	sbrc	r25, 3
    176c:	85 91       	lpm	r24, Z+
    176e:	93 ff       	sbrs	r25, 3
    1770:	81 91       	ld	r24, Z+
    1772:	7f 01       	movw	r14, r30
    1774:	81 11       	cpse	r24, r1
    1776:	b2 cf       	rjmp	.-156    	; 0x16dc <vfprintf+0x58>
    1778:	98 2f       	mov	r25, r24
    177a:	9f 7d       	andi	r25, 0xDF	; 223
    177c:	95 54       	subi	r25, 0x45	; 69
    177e:	93 30       	cpi	r25, 0x03	; 3
    1780:	28 f4       	brcc	.+10     	; 0x178c <vfprintf+0x108>
    1782:	0c 5f       	subi	r16, 0xFC	; 252
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	2f e3       	ldi	r18, 0x3F	; 63
    1788:	29 83       	std	Y+1, r18	; 0x01
    178a:	0d c0       	rjmp	.+26     	; 0x17a6 <vfprintf+0x122>
    178c:	83 36       	cpi	r24, 0x63	; 99
    178e:	31 f0       	breq	.+12     	; 0x179c <vfprintf+0x118>
    1790:	83 37       	cpi	r24, 0x73	; 115
    1792:	71 f0       	breq	.+28     	; 0x17b0 <vfprintf+0x12c>
    1794:	83 35       	cpi	r24, 0x53	; 83
    1796:	09 f0       	breq	.+2      	; 0x179a <vfprintf+0x116>
    1798:	55 c0       	rjmp	.+170    	; 0x1844 <vfprintf+0x1c0>
    179a:	20 c0       	rjmp	.+64     	; 0x17dc <vfprintf+0x158>
    179c:	f8 01       	movw	r30, r16
    179e:	80 81       	ld	r24, Z
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	0e 5f       	subi	r16, 0xFE	; 254
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	88 24       	eor	r8, r8
    17a8:	83 94       	inc	r8
    17aa:	91 2c       	mov	r9, r1
    17ac:	53 01       	movw	r10, r6
    17ae:	12 c0       	rjmp	.+36     	; 0x17d4 <vfprintf+0x150>
    17b0:	28 01       	movw	r4, r16
    17b2:	f2 e0       	ldi	r31, 0x02	; 2
    17b4:	4f 0e       	add	r4, r31
    17b6:	51 1c       	adc	r5, r1
    17b8:	f8 01       	movw	r30, r16
    17ba:	a0 80       	ld	r10, Z
    17bc:	b1 80       	ldd	r11, Z+1	; 0x01
    17be:	36 fe       	sbrs	r3, 6
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <vfprintf+0x144>
    17c2:	69 2d       	mov	r22, r9
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <vfprintf+0x148>
    17c8:	6f ef       	ldi	r22, 0xFF	; 255
    17ca:	7f ef       	ldi	r23, 0xFF	; 255
    17cc:	c5 01       	movw	r24, r10
    17ce:	38 d1       	rcall	.+624    	; 0x1a40 <strnlen>
    17d0:	4c 01       	movw	r8, r24
    17d2:	82 01       	movw	r16, r4
    17d4:	f3 2d       	mov	r31, r3
    17d6:	ff 77       	andi	r31, 0x7F	; 127
    17d8:	3f 2e       	mov	r3, r31
    17da:	15 c0       	rjmp	.+42     	; 0x1806 <vfprintf+0x182>
    17dc:	28 01       	movw	r4, r16
    17de:	22 e0       	ldi	r18, 0x02	; 2
    17e0:	42 0e       	add	r4, r18
    17e2:	51 1c       	adc	r5, r1
    17e4:	f8 01       	movw	r30, r16
    17e6:	a0 80       	ld	r10, Z
    17e8:	b1 80       	ldd	r11, Z+1	; 0x01
    17ea:	36 fe       	sbrs	r3, 6
    17ec:	03 c0       	rjmp	.+6      	; 0x17f4 <vfprintf+0x170>
    17ee:	69 2d       	mov	r22, r9
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <vfprintf+0x174>
    17f4:	6f ef       	ldi	r22, 0xFF	; 255
    17f6:	7f ef       	ldi	r23, 0xFF	; 255
    17f8:	c5 01       	movw	r24, r10
    17fa:	17 d1       	rcall	.+558    	; 0x1a2a <strnlen_P>
    17fc:	4c 01       	movw	r8, r24
    17fe:	f3 2d       	mov	r31, r3
    1800:	f0 68       	ori	r31, 0x80	; 128
    1802:	3f 2e       	mov	r3, r31
    1804:	82 01       	movw	r16, r4
    1806:	33 fc       	sbrc	r3, 3
    1808:	19 c0       	rjmp	.+50     	; 0x183c <vfprintf+0x1b8>
    180a:	82 2d       	mov	r24, r2
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	88 16       	cp	r8, r24
    1810:	99 06       	cpc	r9, r25
    1812:	a0 f4       	brcc	.+40     	; 0x183c <vfprintf+0x1b8>
    1814:	b6 01       	movw	r22, r12
    1816:	80 e2       	ldi	r24, 0x20	; 32
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	f8 de       	rcall	.-528    	; 0x160c <fputc>
    181c:	2a 94       	dec	r2
    181e:	f5 cf       	rjmp	.-22     	; 0x180a <vfprintf+0x186>
    1820:	f5 01       	movw	r30, r10
    1822:	37 fc       	sbrc	r3, 7
    1824:	85 91       	lpm	r24, Z+
    1826:	37 fe       	sbrs	r3, 7
    1828:	81 91       	ld	r24, Z+
    182a:	5f 01       	movw	r10, r30
    182c:	b6 01       	movw	r22, r12
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	ed de       	rcall	.-550    	; 0x160c <fputc>
    1832:	21 10       	cpse	r2, r1
    1834:	2a 94       	dec	r2
    1836:	21 e0       	ldi	r18, 0x01	; 1
    1838:	82 1a       	sub	r8, r18
    183a:	91 08       	sbc	r9, r1
    183c:	81 14       	cp	r8, r1
    183e:	91 04       	cpc	r9, r1
    1840:	79 f7       	brne	.-34     	; 0x1820 <vfprintf+0x19c>
    1842:	e1 c0       	rjmp	.+450    	; 0x1a06 <vfprintf+0x382>
    1844:	84 36       	cpi	r24, 0x64	; 100
    1846:	11 f0       	breq	.+4      	; 0x184c <vfprintf+0x1c8>
    1848:	89 36       	cpi	r24, 0x69	; 105
    184a:	39 f5       	brne	.+78     	; 0x189a <vfprintf+0x216>
    184c:	f8 01       	movw	r30, r16
    184e:	37 fe       	sbrs	r3, 7
    1850:	07 c0       	rjmp	.+14     	; 0x1860 <vfprintf+0x1dc>
    1852:	60 81       	ld	r22, Z
    1854:	71 81       	ldd	r23, Z+1	; 0x01
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	93 81       	ldd	r25, Z+3	; 0x03
    185a:	0c 5f       	subi	r16, 0xFC	; 252
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	08 c0       	rjmp	.+16     	; 0x1870 <vfprintf+0x1ec>
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	07 2e       	mov	r0, r23
    1866:	00 0c       	add	r0, r0
    1868:	88 0b       	sbc	r24, r24
    186a:	99 0b       	sbc	r25, r25
    186c:	0e 5f       	subi	r16, 0xFE	; 254
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	f3 2d       	mov	r31, r3
    1872:	ff 76       	andi	r31, 0x6F	; 111
    1874:	3f 2e       	mov	r3, r31
    1876:	97 ff       	sbrs	r25, 7
    1878:	09 c0       	rjmp	.+18     	; 0x188c <vfprintf+0x208>
    187a:	90 95       	com	r25
    187c:	80 95       	com	r24
    187e:	70 95       	com	r23
    1880:	61 95       	neg	r22
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	8f 4f       	sbci	r24, 0xFF	; 255
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	f0 68       	ori	r31, 0x80	; 128
    188a:	3f 2e       	mov	r3, r31
    188c:	2a e0       	ldi	r18, 0x0A	; 10
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	a3 01       	movw	r20, r6
    1892:	e1 d0       	rcall	.+450    	; 0x1a56 <__ultoa_invert>
    1894:	88 2e       	mov	r8, r24
    1896:	86 18       	sub	r8, r6
    1898:	44 c0       	rjmp	.+136    	; 0x1922 <vfprintf+0x29e>
    189a:	85 37       	cpi	r24, 0x75	; 117
    189c:	31 f4       	brne	.+12     	; 0x18aa <vfprintf+0x226>
    189e:	23 2d       	mov	r18, r3
    18a0:	2f 7e       	andi	r18, 0xEF	; 239
    18a2:	b2 2e       	mov	r11, r18
    18a4:	2a e0       	ldi	r18, 0x0A	; 10
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	25 c0       	rjmp	.+74     	; 0x18f4 <vfprintf+0x270>
    18aa:	93 2d       	mov	r25, r3
    18ac:	99 7f       	andi	r25, 0xF9	; 249
    18ae:	b9 2e       	mov	r11, r25
    18b0:	8f 36       	cpi	r24, 0x6F	; 111
    18b2:	c1 f0       	breq	.+48     	; 0x18e4 <vfprintf+0x260>
    18b4:	18 f4       	brcc	.+6      	; 0x18bc <vfprintf+0x238>
    18b6:	88 35       	cpi	r24, 0x58	; 88
    18b8:	79 f0       	breq	.+30     	; 0x18d8 <vfprintf+0x254>
    18ba:	ae c0       	rjmp	.+348    	; 0x1a18 <vfprintf+0x394>
    18bc:	80 37       	cpi	r24, 0x70	; 112
    18be:	19 f0       	breq	.+6      	; 0x18c6 <vfprintf+0x242>
    18c0:	88 37       	cpi	r24, 0x78	; 120
    18c2:	21 f0       	breq	.+8      	; 0x18cc <vfprintf+0x248>
    18c4:	a9 c0       	rjmp	.+338    	; 0x1a18 <vfprintf+0x394>
    18c6:	e9 2f       	mov	r30, r25
    18c8:	e0 61       	ori	r30, 0x10	; 16
    18ca:	be 2e       	mov	r11, r30
    18cc:	b4 fe       	sbrs	r11, 4
    18ce:	0d c0       	rjmp	.+26     	; 0x18ea <vfprintf+0x266>
    18d0:	fb 2d       	mov	r31, r11
    18d2:	f4 60       	ori	r31, 0x04	; 4
    18d4:	bf 2e       	mov	r11, r31
    18d6:	09 c0       	rjmp	.+18     	; 0x18ea <vfprintf+0x266>
    18d8:	34 fe       	sbrs	r3, 4
    18da:	0a c0       	rjmp	.+20     	; 0x18f0 <vfprintf+0x26c>
    18dc:	29 2f       	mov	r18, r25
    18de:	26 60       	ori	r18, 0x06	; 6
    18e0:	b2 2e       	mov	r11, r18
    18e2:	06 c0       	rjmp	.+12     	; 0x18f0 <vfprintf+0x26c>
    18e4:	28 e0       	ldi	r18, 0x08	; 8
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	05 c0       	rjmp	.+10     	; 0x18f4 <vfprintf+0x270>
    18ea:	20 e1       	ldi	r18, 0x10	; 16
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <vfprintf+0x270>
    18f0:	20 e1       	ldi	r18, 0x10	; 16
    18f2:	32 e0       	ldi	r19, 0x02	; 2
    18f4:	f8 01       	movw	r30, r16
    18f6:	b7 fe       	sbrs	r11, 7
    18f8:	07 c0       	rjmp	.+14     	; 0x1908 <vfprintf+0x284>
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	0c 5f       	subi	r16, 0xFC	; 252
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	06 c0       	rjmp	.+12     	; 0x1914 <vfprintf+0x290>
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 5f       	subi	r16, 0xFE	; 254
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	a3 01       	movw	r20, r6
    1916:	9f d0       	rcall	.+318    	; 0x1a56 <__ultoa_invert>
    1918:	88 2e       	mov	r8, r24
    191a:	86 18       	sub	r8, r6
    191c:	fb 2d       	mov	r31, r11
    191e:	ff 77       	andi	r31, 0x7F	; 127
    1920:	3f 2e       	mov	r3, r31
    1922:	36 fe       	sbrs	r3, 6
    1924:	0d c0       	rjmp	.+26     	; 0x1940 <vfprintf+0x2bc>
    1926:	23 2d       	mov	r18, r3
    1928:	2e 7f       	andi	r18, 0xFE	; 254
    192a:	a2 2e       	mov	r10, r18
    192c:	89 14       	cp	r8, r9
    192e:	58 f4       	brcc	.+22     	; 0x1946 <vfprintf+0x2c2>
    1930:	34 fe       	sbrs	r3, 4
    1932:	0b c0       	rjmp	.+22     	; 0x194a <vfprintf+0x2c6>
    1934:	32 fc       	sbrc	r3, 2
    1936:	09 c0       	rjmp	.+18     	; 0x194a <vfprintf+0x2c6>
    1938:	83 2d       	mov	r24, r3
    193a:	8e 7e       	andi	r24, 0xEE	; 238
    193c:	a8 2e       	mov	r10, r24
    193e:	05 c0       	rjmp	.+10     	; 0x194a <vfprintf+0x2c6>
    1940:	b8 2c       	mov	r11, r8
    1942:	a3 2c       	mov	r10, r3
    1944:	03 c0       	rjmp	.+6      	; 0x194c <vfprintf+0x2c8>
    1946:	b8 2c       	mov	r11, r8
    1948:	01 c0       	rjmp	.+2      	; 0x194c <vfprintf+0x2c8>
    194a:	b9 2c       	mov	r11, r9
    194c:	a4 fe       	sbrs	r10, 4
    194e:	0f c0       	rjmp	.+30     	; 0x196e <vfprintf+0x2ea>
    1950:	fe 01       	movw	r30, r28
    1952:	e8 0d       	add	r30, r8
    1954:	f1 1d       	adc	r31, r1
    1956:	80 81       	ld	r24, Z
    1958:	80 33       	cpi	r24, 0x30	; 48
    195a:	21 f4       	brne	.+8      	; 0x1964 <vfprintf+0x2e0>
    195c:	9a 2d       	mov	r25, r10
    195e:	99 7e       	andi	r25, 0xE9	; 233
    1960:	a9 2e       	mov	r10, r25
    1962:	09 c0       	rjmp	.+18     	; 0x1976 <vfprintf+0x2f2>
    1964:	a2 fe       	sbrs	r10, 2
    1966:	06 c0       	rjmp	.+12     	; 0x1974 <vfprintf+0x2f0>
    1968:	b3 94       	inc	r11
    196a:	b3 94       	inc	r11
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <vfprintf+0x2f2>
    196e:	8a 2d       	mov	r24, r10
    1970:	86 78       	andi	r24, 0x86	; 134
    1972:	09 f0       	breq	.+2      	; 0x1976 <vfprintf+0x2f2>
    1974:	b3 94       	inc	r11
    1976:	a3 fc       	sbrc	r10, 3
    1978:	10 c0       	rjmp	.+32     	; 0x199a <vfprintf+0x316>
    197a:	a0 fe       	sbrs	r10, 0
    197c:	06 c0       	rjmp	.+12     	; 0x198a <vfprintf+0x306>
    197e:	b2 14       	cp	r11, r2
    1980:	80 f4       	brcc	.+32     	; 0x19a2 <vfprintf+0x31e>
    1982:	28 0c       	add	r2, r8
    1984:	92 2c       	mov	r9, r2
    1986:	9b 18       	sub	r9, r11
    1988:	0d c0       	rjmp	.+26     	; 0x19a4 <vfprintf+0x320>
    198a:	b2 14       	cp	r11, r2
    198c:	58 f4       	brcc	.+22     	; 0x19a4 <vfprintf+0x320>
    198e:	b6 01       	movw	r22, r12
    1990:	80 e2       	ldi	r24, 0x20	; 32
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	3b de       	rcall	.-906    	; 0x160c <fputc>
    1996:	b3 94       	inc	r11
    1998:	f8 cf       	rjmp	.-16     	; 0x198a <vfprintf+0x306>
    199a:	b2 14       	cp	r11, r2
    199c:	18 f4       	brcc	.+6      	; 0x19a4 <vfprintf+0x320>
    199e:	2b 18       	sub	r2, r11
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <vfprintf+0x322>
    19a2:	98 2c       	mov	r9, r8
    19a4:	21 2c       	mov	r2, r1
    19a6:	a4 fe       	sbrs	r10, 4
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <vfprintf+0x344>
    19aa:	b6 01       	movw	r22, r12
    19ac:	80 e3       	ldi	r24, 0x30	; 48
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	2d de       	rcall	.-934    	; 0x160c <fputc>
    19b2:	a2 fe       	sbrs	r10, 2
    19b4:	16 c0       	rjmp	.+44     	; 0x19e2 <vfprintf+0x35e>
    19b6:	a1 fc       	sbrc	r10, 1
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <vfprintf+0x33c>
    19ba:	88 e7       	ldi	r24, 0x78	; 120
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <vfprintf+0x340>
    19c0:	88 e5       	ldi	r24, 0x58	; 88
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	b6 01       	movw	r22, r12
    19c6:	0c c0       	rjmp	.+24     	; 0x19e0 <vfprintf+0x35c>
    19c8:	8a 2d       	mov	r24, r10
    19ca:	86 78       	andi	r24, 0x86	; 134
    19cc:	51 f0       	breq	.+20     	; 0x19e2 <vfprintf+0x35e>
    19ce:	a1 fe       	sbrs	r10, 1
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <vfprintf+0x352>
    19d2:	8b e2       	ldi	r24, 0x2B	; 43
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <vfprintf+0x354>
    19d6:	80 e2       	ldi	r24, 0x20	; 32
    19d8:	a7 fc       	sbrc	r10, 7
    19da:	8d e2       	ldi	r24, 0x2D	; 45
    19dc:	b6 01       	movw	r22, r12
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	15 de       	rcall	.-982    	; 0x160c <fputc>
    19e2:	89 14       	cp	r8, r9
    19e4:	30 f4       	brcc	.+12     	; 0x19f2 <vfprintf+0x36e>
    19e6:	b6 01       	movw	r22, r12
    19e8:	80 e3       	ldi	r24, 0x30	; 48
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0f de       	rcall	.-994    	; 0x160c <fputc>
    19ee:	9a 94       	dec	r9
    19f0:	f8 cf       	rjmp	.-16     	; 0x19e2 <vfprintf+0x35e>
    19f2:	8a 94       	dec	r8
    19f4:	f3 01       	movw	r30, r6
    19f6:	e8 0d       	add	r30, r8
    19f8:	f1 1d       	adc	r31, r1
    19fa:	80 81       	ld	r24, Z
    19fc:	b6 01       	movw	r22, r12
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	05 de       	rcall	.-1014   	; 0x160c <fputc>
    1a02:	81 10       	cpse	r8, r1
    1a04:	f6 cf       	rjmp	.-20     	; 0x19f2 <vfprintf+0x36e>
    1a06:	22 20       	and	r2, r2
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <vfprintf+0x388>
    1a0a:	4d ce       	rjmp	.-870    	; 0x16a6 <vfprintf+0x22>
    1a0c:	b6 01       	movw	r22, r12
    1a0e:	80 e2       	ldi	r24, 0x20	; 32
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	fc dd       	rcall	.-1032   	; 0x160c <fputc>
    1a14:	2a 94       	dec	r2
    1a16:	f7 cf       	rjmp	.-18     	; 0x1a06 <vfprintf+0x382>
    1a18:	f6 01       	movw	r30, r12
    1a1a:	86 81       	ldd	r24, Z+6	; 0x06
    1a1c:	97 81       	ldd	r25, Z+7	; 0x07
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <vfprintf+0x3a0>
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	9f ef       	ldi	r25, 0xFF	; 255
    1a24:	2b 96       	adiw	r28, 0x0b	; 11
    1a26:	e2 e1       	ldi	r30, 0x12	; 18
    1a28:	cc c0       	rjmp	.+408    	; 0x1bc2 <__epilogue_restores__>

00001a2a <strnlen_P>:
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	05 90       	lpm	r0, Z+
    1a2e:	61 50       	subi	r22, 0x01	; 1
    1a30:	70 40       	sbci	r23, 0x00	; 0
    1a32:	01 10       	cpse	r0, r1
    1a34:	d8 f7       	brcc	.-10     	; 0x1a2c <strnlen_P+0x2>
    1a36:	80 95       	com	r24
    1a38:	90 95       	com	r25
    1a3a:	8e 0f       	add	r24, r30
    1a3c:	9f 1f       	adc	r25, r31
    1a3e:	08 95       	ret

00001a40 <strnlen>:
    1a40:	fc 01       	movw	r30, r24
    1a42:	61 50       	subi	r22, 0x01	; 1
    1a44:	70 40       	sbci	r23, 0x00	; 0
    1a46:	01 90       	ld	r0, Z+
    1a48:	01 10       	cpse	r0, r1
    1a4a:	d8 f7       	brcc	.-10     	; 0x1a42 <strnlen+0x2>
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	8e 0f       	add	r24, r30
    1a52:	9f 1f       	adc	r25, r31
    1a54:	08 95       	ret

00001a56 <__ultoa_invert>:
    1a56:	fa 01       	movw	r30, r20
    1a58:	aa 27       	eor	r26, r26
    1a5a:	28 30       	cpi	r18, 0x08	; 8
    1a5c:	61 f1       	breq	.+88     	; 0x1ab6 <__ultoa_invert+0x60>
    1a5e:	20 31       	cpi	r18, 0x10	; 16
    1a60:	91 f1       	breq	.+100    	; 0x1ac6 <__ultoa_invert+0x70>
    1a62:	e8 94       	clt
    1a64:	6f 93       	push	r22
    1a66:	6e 7f       	andi	r22, 0xFE	; 254
    1a68:	6e 5f       	subi	r22, 0xFE	; 254
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a70:	af 4f       	sbci	r26, 0xFF	; 255
    1a72:	b1 e0       	ldi	r27, 0x01	; 1
    1a74:	40 d0       	rcall	.+128    	; 0x1af6 <__ultoa_invert+0xa0>
    1a76:	b4 e0       	ldi	r27, 0x04	; 4
    1a78:	3e d0       	rcall	.+124    	; 0x1af6 <__ultoa_invert+0xa0>
    1a7a:	67 0f       	add	r22, r23
    1a7c:	78 1f       	adc	r23, r24
    1a7e:	89 1f       	adc	r24, r25
    1a80:	9a 1f       	adc	r25, r26
    1a82:	a1 1d       	adc	r26, r1
    1a84:	68 0f       	add	r22, r24
    1a86:	79 1f       	adc	r23, r25
    1a88:	8a 1f       	adc	r24, r26
    1a8a:	91 1d       	adc	r25, r1
    1a8c:	a1 1d       	adc	r26, r1
    1a8e:	6a 0f       	add	r22, r26
    1a90:	71 1d       	adc	r23, r1
    1a92:	81 1d       	adc	r24, r1
    1a94:	91 1d       	adc	r25, r1
    1a96:	a1 1d       	adc	r26, r1
    1a98:	22 d0       	rcall	.+68     	; 0x1ade <__ultoa_invert+0x88>
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <__ultoa_invert+0x48>
    1a9c:	68 94       	set
    1a9e:	3f 91       	pop	r19
    1aa0:	06 2e       	mov	r0, r22
    1aa2:	00 0c       	add	r0, r0
    1aa4:	30 19       	sub	r19, r0
    1aa6:	00 0c       	add	r0, r0
    1aa8:	00 0c       	add	r0, r0
    1aaa:	30 19       	sub	r19, r0
    1aac:	30 5d       	subi	r19, 0xD0	; 208
    1aae:	31 93       	st	Z+, r19
    1ab0:	ce f6       	brtc	.-78     	; 0x1a64 <__ultoa_invert+0xe>
    1ab2:	cf 01       	movw	r24, r30
    1ab4:	08 95       	ret
    1ab6:	46 2f       	mov	r20, r22
    1ab8:	47 70       	andi	r20, 0x07	; 7
    1aba:	40 5d       	subi	r20, 0xD0	; 208
    1abc:	41 93       	st	Z+, r20
    1abe:	b3 e0       	ldi	r27, 0x03	; 3
    1ac0:	0f d0       	rcall	.+30     	; 0x1ae0 <__ultoa_invert+0x8a>
    1ac2:	c9 f7       	brne	.-14     	; 0x1ab6 <__ultoa_invert+0x60>
    1ac4:	f6 cf       	rjmp	.-20     	; 0x1ab2 <__ultoa_invert+0x5c>
    1ac6:	46 2f       	mov	r20, r22
    1ac8:	4f 70       	andi	r20, 0x0F	; 15
    1aca:	40 5d       	subi	r20, 0xD0	; 208
    1acc:	4a 33       	cpi	r20, 0x3A	; 58
    1ace:	18 f0       	brcs	.+6      	; 0x1ad6 <__ultoa_invert+0x80>
    1ad0:	49 5d       	subi	r20, 0xD9	; 217
    1ad2:	31 fd       	sbrc	r19, 1
    1ad4:	40 52       	subi	r20, 0x20	; 32
    1ad6:	41 93       	st	Z+, r20
    1ad8:	02 d0       	rcall	.+4      	; 0x1ade <__ultoa_invert+0x88>
    1ada:	a9 f7       	brne	.-22     	; 0x1ac6 <__ultoa_invert+0x70>
    1adc:	ea cf       	rjmp	.-44     	; 0x1ab2 <__ultoa_invert+0x5c>
    1ade:	b4 e0       	ldi	r27, 0x04	; 4
    1ae0:	a6 95       	lsr	r26
    1ae2:	97 95       	ror	r25
    1ae4:	87 95       	ror	r24
    1ae6:	77 95       	ror	r23
    1ae8:	67 95       	ror	r22
    1aea:	ba 95       	dec	r27
    1aec:	c9 f7       	brne	.-14     	; 0x1ae0 <__ultoa_invert+0x8a>
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	61 05       	cpc	r22, r1
    1af2:	71 05       	cpc	r23, r1
    1af4:	08 95       	ret
    1af6:	9b 01       	movw	r18, r22
    1af8:	ac 01       	movw	r20, r24
    1afa:	0a 2e       	mov	r0, r26
    1afc:	06 94       	lsr	r0
    1afe:	57 95       	ror	r21
    1b00:	47 95       	ror	r20
    1b02:	37 95       	ror	r19
    1b04:	27 95       	ror	r18
    1b06:	ba 95       	dec	r27
    1b08:	c9 f7       	brne	.-14     	; 0x1afc <__ultoa_invert+0xa6>
    1b0a:	62 0f       	add	r22, r18
    1b0c:	73 1f       	adc	r23, r19
    1b0e:	84 1f       	adc	r24, r20
    1b10:	95 1f       	adc	r25, r21
    1b12:	a0 1d       	adc	r26, r0
    1b14:	08 95       	ret

00001b16 <eeprom_read_block>:
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22

00001b1a <eeprom_read_blraw>:
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	f9 99       	sbic	0x1f, 1	; 31
    1b1e:	fe cf       	rjmp	.-4      	; 0x1b1c <eeprom_read_blraw+0x2>
    1b20:	06 c0       	rjmp	.+12     	; 0x1b2e <eeprom_read_blraw+0x14>
    1b22:	f2 bd       	out	0x22, r31	; 34
    1b24:	e1 bd       	out	0x21, r30	; 33
    1b26:	f8 9a       	sbi	0x1f, 0	; 31
    1b28:	31 96       	adiw	r30, 0x01	; 1
    1b2a:	00 b4       	in	r0, 0x20	; 32
    1b2c:	0d 92       	st	X+, r0
    1b2e:	41 50       	subi	r20, 0x01	; 1
    1b30:	50 40       	sbci	r21, 0x00	; 0
    1b32:	b8 f7       	brcc	.-18     	; 0x1b22 <eeprom_read_blraw+0x8>
    1b34:	08 95       	ret

00001b36 <eeprom_update_block>:
    1b36:	dc 01       	movw	r26, r24
    1b38:	a4 0f       	add	r26, r20
    1b3a:	b5 1f       	adc	r27, r21
    1b3c:	41 50       	subi	r20, 0x01	; 1
    1b3e:	50 40       	sbci	r21, 0x00	; 0
    1b40:	40 f0       	brcs	.+16     	; 0x1b52 <eeprom_update_block+0x1c>
    1b42:	cb 01       	movw	r24, r22
    1b44:	84 0f       	add	r24, r20
    1b46:	95 1f       	adc	r25, r21
    1b48:	2e 91       	ld	r18, -X
    1b4a:	05 d0       	rcall	.+10     	; 0x1b56 <eeprom_update_r18>
    1b4c:	41 50       	subi	r20, 0x01	; 1
    1b4e:	50 40       	sbci	r21, 0x00	; 0
    1b50:	d8 f7       	brcc	.-10     	; 0x1b48 <eeprom_update_block+0x12>
    1b52:	08 95       	ret

00001b54 <eeprom_update_byte>:
    1b54:	26 2f       	mov	r18, r22

00001b56 <eeprom_update_r18>:
    1b56:	f9 99       	sbic	0x1f, 1	; 31
    1b58:	fe cf       	rjmp	.-4      	; 0x1b56 <eeprom_update_r18>
    1b5a:	92 bd       	out	0x22, r25	; 34
    1b5c:	81 bd       	out	0x21, r24	; 33
    1b5e:	f8 9a       	sbi	0x1f, 0	; 31
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	00 b4       	in	r0, 0x20	; 32
    1b64:	02 16       	cp	r0, r18
    1b66:	39 f0       	breq	.+14     	; 0x1b76 <eeprom_update_r18+0x20>
    1b68:	1f ba       	out	0x1f, r1	; 31
    1b6a:	20 bd       	out	0x20, r18	; 32
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	fa 9a       	sbi	0x1f, 2	; 31
    1b72:	f9 9a       	sbi	0x1f, 1	; 31
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	08 95       	ret

00001b78 <__mulqi3>:
    1b78:	00 24       	eor	r0, r0

00001b7a <__mulqi3_loop>:
    1b7a:	80 fd       	sbrc	r24, 0
    1b7c:	06 0e       	add	r0, r22
    1b7e:	66 0f       	add	r22, r22
    1b80:	11 f0       	breq	.+4      	; 0x1b86 <__mulqi3_exit>
    1b82:	86 95       	lsr	r24
    1b84:	d1 f7       	brne	.-12     	; 0x1b7a <__mulqi3_loop>

00001b86 <__mulqi3_exit>:
    1b86:	80 2d       	mov	r24, r0
    1b88:	08 95       	ret

00001b8a <__prologue_saves__>:
    1b8a:	2f 92       	push	r2
    1b8c:	3f 92       	push	r3
    1b8e:	4f 92       	push	r4
    1b90:	5f 92       	push	r5
    1b92:	6f 92       	push	r6
    1b94:	7f 92       	push	r7
    1b96:	8f 92       	push	r8
    1b98:	9f 92       	push	r9
    1b9a:	af 92       	push	r10
    1b9c:	bf 92       	push	r11
    1b9e:	cf 92       	push	r12
    1ba0:	df 92       	push	r13
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	ca 1b       	sub	r28, r26
    1bb4:	db 0b       	sbc	r29, r27
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	09 94       	ijmp

00001bc2 <__epilogue_restores__>:
    1bc2:	2a 88       	ldd	r2, Y+18	; 0x12
    1bc4:	39 88       	ldd	r3, Y+17	; 0x11
    1bc6:	48 88       	ldd	r4, Y+16	; 0x10
    1bc8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bca:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bcc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bce:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bd0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bd2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bd4:	b9 84       	ldd	r11, Y+9	; 0x09
    1bd6:	c8 84       	ldd	r12, Y+8	; 0x08
    1bd8:	df 80       	ldd	r13, Y+7	; 0x07
    1bda:	ee 80       	ldd	r14, Y+6	; 0x06
    1bdc:	fd 80       	ldd	r15, Y+5	; 0x05
    1bde:	0c 81       	ldd	r16, Y+4	; 0x04
    1be0:	1b 81       	ldd	r17, Y+3	; 0x03
    1be2:	aa 81       	ldd	r26, Y+2	; 0x02
    1be4:	b9 81       	ldd	r27, Y+1	; 0x01
    1be6:	ce 0f       	add	r28, r30
    1be8:	d1 1d       	adc	r29, r1
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	ed 01       	movw	r28, r26
    1bf6:	08 95       	ret

00001bf8 <_exit>:
    1bf8:	f8 94       	cli

00001bfa <__stop_program>:
    1bfa:	ff cf       	rjmp	.-2      	; 0x1bfa <__stop_program>
